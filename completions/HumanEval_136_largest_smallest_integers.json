{
  "problem_id": "HumanEval_136_largest_smallest_integers",
  "prompt": "from typing import List, Tuple, Optional\n\ndef largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"",
  "completions": [
    "\n    if not lst:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if lst[0] < 0:\n        return largest_smallest_integers(lst[1:]), None\n    return largest_smallest_integers(lst[1:]), lst[0]\n",
    "\n    if not lst:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    if",
    "\n    if len(lst) == 0:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if lst[0] < 0:\n        return lst[0], lst[1]\n    if lst[1] < 0:\n        return lst[1], lst[0]\n    return lst[0], lst[1]\n",
    "\n    if len(lst) == 0:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if lst[0] < 0:\n        return lst[0], lst[0]\n    if lst[1] < 0:\n        return lst[0], lst[1]\n    return lst[0], lst[1]\n",
    "\n    if not lst:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    return max(lst), min(lst)\n",
    "\n    if lst is None:\n        return None, None\n    if len(lst) == 0:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if lst[0] < 0:\n        return largest_smallest_integers(lst[1:]), lst[0]\n    if lst[1] < 0:\n        return largest_smallest_integers(lst[2:]), lst[1]\n    return largest_smallest_integers(lst[2:]), lst[0]\n",
    "\n    if not lst:\n        return None, None\n    if not lst[0]:\n        return None, None\n    if not lst[-1]:\n        return None, None\n    return max(lst), min(lst)\n",
    "\n    if lst is None:\n        return None, None\n    if len(lst) == 0:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if lst[0] < 0:\n        return lst[0], lst[0]\n    if lst[1] < 0:\n        return lst[1], lst[1]\n    if lst[0] < lst[1]:\n        return lst[0], lst[1]\n    return lst[0], lst[1]\n",
    "\n    if lst is None:\n        return None, None\n    if len(lst) == 0:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if len(lst) == 2:\n        return lst[0], lst[1]\n    if len(lst) == 3:\n        return lst[0], lst[1]\n    if len(lst) == 4:\n        return lst[0], lst[1]\n    if len(lst) == 5:\n        return lst[0], lst[1]\n    if len(lst) == 6:\n        return lst[0], lst[1]\n    if len(lst) == 7:\n        return lst[0], lst[1]\n    if len(lst) == 8:\n        return lst[0], lst[1]\n    if len(lst) == 9:\n        return lst[0], lst[1]\n    if len(lst) == 10:\n        return lst[0], lst[1]\n    if len(lst) == 11:\n        return lst[0], lst[1]\n    if len(lst) == 12:\n        return lst[0], lst[1]\n    if len(lst) == 13:\n        return lst[0], lst[1]\n    if len(lst) == 14",
    "\n    if not lst:\n        return None, None\n    if not lst[0]:\n        return None, None\n    if not lst[-1]:\n        return None, None\n    if lst[0] < 0:\n        return None, None\n    if lst[-1] < 0:\n        return None, None\n    return max(lst), min(lst)\n",
    "\n    if not lst:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    return max(lst), min(lst)\n",
    "\n    if not lst:\n        return None, None\n    if not lst[0]:\n        return None, None\n    if not lst[-1]:\n        return None, None\n    if lst[0] < 0 and lst[-1] > 0:\n        return None, None\n    if lst[0] < 0 and lst[-1] < 0:\n        return None, None\n    if lst[0] > 0 and lst[-1] < 0:\n        return None, None\n    if lst[0] > 0 and lst[-1] > 0:\n        return None, None\n    if lst[0] < 0 and lst[-1] < 0:\n        return None, None\n    if lst[0] < 0 and lst[-1] > 0:\n        return None, None\n    if lst[0] > 0 and lst[-1] > 0:\n        return None, None\n    if lst[0] > 0 and lst[-1] < 0:\n        return None, None\n    if lst[0] < 0 and lst[-1] > 0:\n        return None, None\n    if lst[0] < 0 and lst[-1] < 0:\n        return None, None\n    if lst[0] > 0 and lst[-1] < 0:\n        return None, None\n    if lst[0] > 0 and lst[-1",
    "\n    if not lst:\n        return None, None\n    if not lst:\n        return None, None\n    if not lst:\n        return None, None\n\n    if lst[0] < 0:\n        return None, None\n\n    if lst[0] < lst[1]:\n        return lst[0], lst[1]\n\n    return lst[0], lst[1]\n",
    "\n    if not lst:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    return max(lst), min(lst)\n",
    "\n    if not lst:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[-1] > 0:\n        return None, None\n    if lst[0] < lst[-1]:\n        return None, None\n    if lst[0] < 0:\n        return lst[0], None\n    if lst[-1] > 0:\n        return None, lst[-1]\n    return lst[0], lst[-1]\n",
    "\n    if not lst:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if lst[0] < 0:\n        return largest_smallest_integers(lst[1:]), None\n    return largest_smallest_integers(lst[1:]), lst[0]\n",
    "\n\n    if not lst:\n        return None, None\n\n    if len(lst) == 1:\n        return lst[0], lst[0]\n\n    if lst[0] < 0:\n        return lst[0], lst[0]\n\n    if lst[0] > 0:\n        return lst[0], lst[0]\n\n    return lst[0], lst[0]\n",
    "\n    if not lst:\n        return None, None\n    if not lst[0] < 0:\n        return None, None\n    if not lst[0] > 0:\n        return None, None\n    return min(lst), max(lst)\n",
    "\n    if not lst:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if lst[0] < 0:\n        return lst[0], lst[0]\n    if lst[0] > 0:\n        return lst[0], lst[0]\n    if lst[0] < 0:\n        return lst[0], lst[0]\n    if lst[0] > 0:\n        return lst[0], lst[0]\n    return None, None\n",
    "\n    if len(lst) == 0:\n        return None, None\n    if len(lst) == 1:\n        return lst[0], lst[0]\n    if lst[0] < 0:\n        return lst[0], lst[0]\n    if lst[0] > 0:\n        return lst[0], lst[0]\n    return lst[0], lst[0]\n"
  ]
}