{
  "problem_id": "HumanEval_90_next_smallest",
  "prompt": "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    >>> next_smallest([1, 2, 3, 4, 5])\n    2\n    >>> next_smallest([5, 1, 4, 3, 2])\n    2\n    >>> next_smallest([])\n    None\n    >>> next_smallest([1, 1])\n    None\n    \"\"\"",
  "completions": [
    "\n    return next(i for i in lst if i < lst[-1])\n",
    "\n    return next(i for i in lst if lst.count(i) > 1)\n",
    "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return lst[1]\n",
    "\n    if len(lst) == 0:\n        return None\n    elif len(lst) == 1:\n        return lst[0]\n    else:\n        return lst[1]\n",
    "\n    if not lst:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return next_smallest(lst[1:])\n",
    "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) ==",
    "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return next_smallest(lst[1:])\n",
    "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return lst[1] if lst[1] < lst[0] else next_smallest(lst[1:])\n",
    "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) ==",
    "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return lst[1]\n",
    "\n    return next(i for i in lst if i < lst[1])\n",
    "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return lst[1] if lst[0] < lst[1] else next_smallest(lst[1:])\n",
    "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return lst[1]\n",
    "\n    return next_smallest_helper(lst, 0, len(lst) - 1)\n",
    "\n    return None if len(lst) == 1 else lst[1]\n",
    "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return lst[1] if lst[1] < lst[0] else next_smallest(lst[1:])\n",
    "\n    return None if len(lst) == 1 else lst[1]\n",
    "\n    if not lst:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return next_smallest(lst[1:])\n",
    "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return min(lst[1:])\n",
    "\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[1]\n    return next_smallest(lst[1:])\n"
  ]
}