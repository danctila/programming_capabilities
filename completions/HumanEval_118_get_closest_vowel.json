{
  "problem_id": "HumanEval_118_get_closest_vowel",
  "prompt": "def get_closest_vowel(word: str) -> str:\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    >>> get_closest_vowel('yogurt')\n    'u'\n    >>> get_closest_vowel('FULL')\n    'U'\n    >>> get_closest_vowel('quick')\n    ''\n    >>> get_closest_vowel('ab')\n    ''\n    \"\"\"",
  "completions": [
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_index = [i for i, v in enumerate(vowels) if v == word[i]]\n    if vowels_index:\n        return vowels[vowels_index[0]]\n    return ''\n",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('x')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('q')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('j')\n    vowels.remove('k')\n    vowels.remove('l')\n    vowels.remove('m')\n    vowels.remove('n')\n    vowels.remove('o')\n    vowels.remove('p')\n    vowels.remove('q')\n    vowels.remove('r')\n    vowels.remove('s')\n    vowels.remove('t')\n    vowels.remove('u')\n    vowels.remove('v')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('j')\n    vowels.remove('k')\n    vowels.remove('l')\n    vowels.remove('m')\n    vowels.remove('n')\n    vowels.remove('o')\n    vowels.remove('p')\n    vowels.remove('q')\n    vowels.remove('r')\n    vowels.remove('s')\n    vowels.remove('t')\n    vowels",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return word[i]\n    return ''\n",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return vowels[vowels.index(word[1]) - 1]\n\n",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return vowels[i]\n    return ''\n",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_index = [i for i, v in enumerate(vowels) if v == word[0]]\n    vowels_index.sort()\n    vowels_index.reverse()\n    vowels_index = vowels_index[1:]\n    vowels_index.append(len(vowels) - 1)\n    vowels_index.sort()\n    vowels_index.reverse()\n    vowels_index = vowels_index[1:]\n    vowels_index.append(len(vowels) - 1)\n    vowels_index.sort()\n    vowels_index.reverse()\n    vowels_index = vowels_index[1:]\n    vowels_index.append(len(vowels) - 1)\n    vowels_index.sort()\n    vowels_index.reverse()\n    vowels_index = vowels_index[1:]\n    vowels_index.append(len(vowels) - 1)\n    vowels_index.sort()\n    vowels_index.reverse()\n    vowels_index = vowels_index[1:]\n    vowels_index.append(len(vowels) - 1)\n    vowels_index.sort()\n    vowels_index.reverse()\n    vowels_index = vowels_index[1:]\n    vowels_index.append(len(vowels) - 1)\n    vowels_index.",
    "\n    vowels = 'aeiou'\n    vowels_index = [i for i, letter in enumerate(vowels) if letter == word[i]]\n    if vowels_index:\n        return vowels[vowels_index[0]]\n    return ''\n",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return vowels[i]\n    return ''\n\n",
    "\n    vowels = 'aeiou'\n    vowel_index = vowels.index(word[0])\n    vowel_index += 1\n    vowel_index = vowel_index % len(vowels)\n    vowel_index += 1\n    vowel_index = vowel_index % len(vowels)\n    vowel_index += 1\n    vowel_index = vowel_index % len(vowels)\n    vowel_index += 1\n    vowel_index = vowel_index % len(vowels)\n    vowel_index += 1\n    vowel_index = vowel_index % len(vowels)\n    vowel_index += 1\n    vowel_index = vowel_index % len(vowels)\n    vowel_index += 1\n    vowel_index = vowel_index % len(vowels)\n    vowel_index += 1\n    vowel_index = vowel_index % len(vowels)\n    vowel_index += 1\n    vowel_index = vowel_index % len(vowels)\n    vowel_index += 1\n    vowel_index = vowel_index % len(vowels)\n    vowel_index += 1\n    vowel_index = vowel_index % len(vowels)\n    vowel_index += 1\n    vowel_index = vowel_index % len(vowels)\n    vowel_index += 1\n    vowel_index = vowel_index %",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] not in vowels:\n            break\n    return word[i]\n",
    "\n    vowels = 'aeiou'\n    vowels_index = [i for i, x in enumerate(vowels) if x == word[i]]\n    if len(vowels_index) == 0:\n        return ''\n    vowels_index = vowels_index[0]\n    return vowels[vowels_index]\n",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return vowels[0] if vowels.index(word[0]) < vowels.index(word[-1]) else vowels[1]\n\n",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return vowels[i]\n    return ''\n",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return vowels[i]\n    return ''\n",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('q')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('w')\n    vowels",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return vowels[i]\n    return ''\n\n",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('q')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('q')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('q')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('q')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('q')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('q')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('q')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels.remove('y')\n    vowels.remove('z')\n    vowels.remove('q')\n    vowels.remove('w')\n    vowels.remove('x')\n    vowels",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return vowels[i]\n    return ''\n\n",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return vowels[i]\n        elif word[i] in consonants:\n            return word[i]\n    return ''\n",
    "\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(len(word)):\n        if word[i] in vowels:\n            return vowels[i]\n    return ''\n"
  ]
}