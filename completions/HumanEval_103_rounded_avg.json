{
  "problem_id": "HumanEval_103_rounded_avg",
  "prompt": "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str, int]:\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"",
  "completions": [
    "\n    if n > m:\n        return -1\n    return bin(int(n, 2) + int(m, 2))[2:]\n",
    "\n    if n > m:\n        return -1\n    return bin(int(n, 2) + int(m, 2))[2:]\n",
    "\n    return bin(int(n, 2) + int(m, 2))[2:]\n",
    "\n    if n > m:\n        return -1\n    if n == m:\n        return '0b1'\n    if n < m:\n        return '0b0'\n    return '0b' + str(n // m) + str(n % m)\n",
    "\n    if n > m:\n        return -1\n    else:\n        return bin(int(n, 2) + int(m, 2))[-1]\n",
    "\n    return bin(int(n, 2) + int(m, 2))[2:]\n",
    "\n    if n > m:\n        return -1\n    return bin(int(n) + int(m)).replace('0b', '')\n",
    "\n    if n > m:\n        return -1\n    return bin(n // m).replace('b', '')\n",
    "\n    if n > m:\n        return -1\n    if n == m:\n        return '0b00'\n    if n < m:\n        return '0b11'\n    return '0b' + str(int(n / m) + 1)\n",
    "\n    if n > m:\n        return -1\n    else:\n        return bin(int(n, 2) + int(m, 2))[-3:]\n",
    "\n    if n > m:\n        return -1\n    return bin(int(n, 2) + int(m, 2))[2:]\n",
    "\n    if n > m:\n        return -1\n    return bin(int(n, 2) + int(m, 2))[2:].zfill(n)\n",
    "\n    return int(bin(n + m).replace('0b', ''))\n",
    "\n    if n > m:\n        return -1\n    return bin(int(n, 2) + int(m, 2))[2:]\n",
    "\n    if n > m:\n        return -1\n    if n == m:\n        return '0b00'\n    if n == m - 1:\n        return '0b1'\n    if n == m + 1:\n        return '0b0'\n    if n == m + 2:\n        return '0b10'\n    if n == m + 3:\n        return '0b11'\n    if n == m + 4:\n        return '0b100'\n    if n == m + 5:\n        return '0b101'\n    if n == m + 6:\n        return '0b110'\n    if n == m + 7:\n        return '0b111'\n    if n == m + 8:\n        return '0b1000'\n    if n == m + 9:\n        return '0b1001'\n    if n == m + 10:\n        return '0b1010'\n    if n == m + 11:\n        return '0b1011'\n    if n == m + 12:\n        return '0b1100'\n    if n == m + 13:\n        return '0b1101'\n    if n == m + 14:\n        return '0b1110'",
    "\n    return bin(int(str(n) + str(m), 2)[-1])[2:].zfill(2)\n",
    "\n    if n > m:\n        return -1\n    if n == m:\n        return '0b0'\n    if n == m - 1:\n        return '0b1'\n    if n == m + 1:\n        return '0b0'\n    return '0b' * (m - n) + str(n)\n",
    "\n    if n > m:\n        return -1\n    return bin(int(n, 2) + int(m, 2))[2:]\n",
    "\n    if n > m:\n        return -1\n    else:\n        return bin(int(n, 2) + int(m, 2))[-1]\n",
    "\n    if m > n:\n        return -1\n    return bin(int(n, 2) + int(m, 2))[2:]\n"
  ]
}