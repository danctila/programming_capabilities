{
  "problem_id": "HumanEval_87_get_row",
  "prompt": "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n    [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    >>> get_row([], 1)\n    []\n    >>> get_row([[], [1], [1, 2, 3]], 3)\n    [(2, 2)]\n    \"\"\"",
  "completions": [
    "\n    lst_len = len(lst)\n    if lst_len == 0:\n        return []\n    if lst_len == 1:\n        return [lst[0]]\n    if lst_len == 2:\n        return [lst[0], lst[1]]\n    if lst_len == 3:\n        return [lst[0], lst[1], lst[2]]\n    if lst_len == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if lst_len == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if lst_len == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if lst_len == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if lst_len == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if lst_len == 9:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6",
    "\n    lst = sorted(lst, key=lambda x: x[0])\n    return [x for x in lst if x[0] == x[1]]\n",
    "\n    return sorted(\n        [\n            (i, j)\n            for i in range(len(lst))\n            for j in range(len(lst[i]))\n            if lst[i][j] == x\n        ],\n        key=lambda x: (x[0], x[1]),\n    )\n\n",
    "\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    if len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    if len(lst) == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if len(lst) == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 9:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[",
    "\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    if len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    if len(lst) == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if len(lst) == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 9:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[",
    "\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    if len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    if len(lst) == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if len(lst) == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 9:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7",
    "\n    # TODO: Implement this function\n    # return [(x, y) for x in range(len(lst)) for y in range(len(lst[x]))]\n    return [(x, y) for x in range(len(lst)) for y in range(len(lst[x]))]\n",
    "\n    row = []\n    for row in lst:\n        row.sort(key=lambda x: x[0])\n        row.sort(key=lambda x: x[1])\n        row.sort(key=lambda x: x[0], reverse=True)\n        row.sort(key=lambda x: x[1], reverse=True)\n    return row\n",
    "\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    rows = []\n    cols = []\n    for i in range(len(lst)):\n        if lst[i][0] == x:\n            rows.append(lst[i])\n            cols.append(lst[i][1])\n    rows.sort(key=lambda x: x[0])\n    cols.sort(key=lambda x: x[1])\n    return [tuple(sorted(row)) for row in zip(rows, cols)]\n",
    "\n    # TODO: Implement this function\n    # return [(x, y) for x in range(len(lst)) for y in range(len(lst[x]))]\n    return [(x, y) for x in range(len(lst)) for y in range(len(lst[x]))]\n",
    "\n    if not lst:\n        return []\n    rows = sorted(lst, key=lambda x: x[0])\n    cols = sorted(lst, key=lambda x: x[1])\n    return [(x[0], x[1]) for x in zip(rows, cols)]\n",
    "\n    row_list = []\n    for row in lst:\n        row_list.append(sorted(row, key=lambda x: x[0]))\n    return row_list\n",
    "\n    row_list = []\n    for row in lst:\n        row_list.append(sorted(row, key=lambda x: (x[0], x[1])))\n    return row_list\n",
    "\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0][0], lst[1][0]]\n    if len(lst) == 3:\n        return [lst[0][0], lst[1][0], lst[2][0]]\n    if len(lst) == 4:\n        return [lst[0][0], lst[1][0], lst[2][0], lst[3][0]]\n    if len(lst) == 5:\n        return [lst[0][0], lst[1][0], lst[2][0], lst[3][0], lst[4][0]]\n    if len(lst) == 6:\n        return [lst[0][0], lst[1][0], lst[2][0], lst[3][0], lst[4][0], lst[5][0]]\n    if len(lst) == 7:\n        return [lst[0][0], lst[1][0], lst[2][0], lst[3][0], lst[4][0], lst[5][0], lst[6][0]]\n    if len(lst) == 8:\n        return [lst[0][0], lst[1][0], lst[2][0], lst[3][",
    "\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    if len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    if len(lst) == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if len(lst) == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 9:\n        return [lst",
    "\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0][0], lst[0][1]]\n    if len(lst) == 3:\n        return [lst[0][0], lst[0][1], lst[0][2]]\n    if len(lst) == 4:\n        return [lst[0][0], lst[0][1], lst[0][2], lst[0][3]]\n    if len(lst) == 5:\n        return [lst[0][0], lst[0][1], lst[0][2], lst[0][3], lst[0][4]]\n    if len(lst) == 6:\n        return [lst[0][0], lst[0][1], lst[0][2], lst[0][3], lst[0][4], lst[0][5]]\n    if len(lst) == 7:\n        return [lst[0][0], lst[0][1], lst[0][2], lst[0][3], lst[0][4], lst[0][5], lst[0][6]]\n    if len(lst) == 8:\n        return [lst[0][0], lst[0][1], lst[0][2], lst[0][",
    "\n    lst = sorted(lst, key=lambda x: x[0])\n    return [x for x in lst if x[0] == x[1]]\n",
    "\n    if not lst:\n        return []\n    if not lst[0]:\n        return []\n    if len(lst) == 1:\n        return [(lst[0][0], lst[0][1])]\n    if len(lst) == 2:\n        return [(lst[0][0], lst[0][1]), (lst[1][0], lst[1][1])]\n    if len(lst) == 3:\n        return [(lst[0][0], lst[0][1]), (lst[1][0], lst[1][1]), (lst[2][0], lst[2][1])]\n    if len(lst) == 4:\n        return [(lst[0][0], lst[0][1]), (lst[1][0], lst[1][1]), (lst[2][0], lst[2][1]), (lst[3][0], lst[3][1])]\n    if len(lst) == 5:\n        return [(lst[0][0], lst[0][1]), (lst[1][0], lst[1][1]), (lst[2][0], lst[2][1]), (lst[3][0], lst[3][1]), (lst[4][0], lst[4][1])]\n    if len(lst) == 6:\n        return [(lst[0][0], lst[0][1]), (lst",
    "\n    rows = sorted(lst, key=lambda x: x[0])\n    cols = sorted(lst, key=lambda x: x[1])\n    return [(x, y) for x, y in zip(rows, cols)]\n",
    "\n    lst = sorted(lst, key=lambda x: x[0])\n    return [x for x in lst if x[1] == x[0]]\n"
  ]
}