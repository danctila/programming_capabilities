{
  "problem_id": "HumanEval_81_numerical_letter_grade",
  "prompt": "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"",
  "completions": [
    "\n    grade_list = []\n    for grade in grades:\n        grade_list.append(grade)\n    grade_list.sort()\n    grade_list.reverse()\n    grade_list.append('E')\n    return grade_list\n",
    "\n    # Your code here\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades\n",
    "\n    grade_table = [\n        [4.0, 'A+'],\n        [3.0, 'A'],\n        [2.0, 'A-'],\n        [1.0, 'B+'],\n        [0.7, 'B'],\n        [0.0, 'D+'],\n        [0.0, 'D'],\n        [0.0, 'E']\n    ]\n    return grade_table[grades.index(max(grades))]\n",
    "\n    # TODO: Implement this function\n    # 1. Create a dictionary with the letter grades as keys and the GPA as values\n    # 2. Iterate through the list of grades and check if the grade is in the dictionary\n    # 3. If it is, return the letter grade\n    # 4. If it is not, return the grade\n    # 5. Return the list of letter grades\n\n    # TODO: Implement this function\n    # 1. Create a dictionary with the letter grades as keys and the GPA as values\n    # 2. Iterate through the list of grades and check if the grade is in the dictionary\n    # 3. If it is, return the letter grade\n    # 4. If it is not, return the grade\n    # 5. Return the list of letter grades\n\n    # TODO: Implement this function\n    # 1. Create a dictionary with the letter grades as keys and the GPA as values\n    # 2. Iterate through the list of grades and check if the grade is in the dictionary\n    # 3. If it is, return the letter grade\n    # 4. If it is not, return the grade\n    # 5. Return the list of letter grades\n\n    # TODO: Implement this function\n    # 1. Create a dictionary with the letter grades as keys and the GPA as values\n    # 2. Iterate through the list of grades and check if the grade is in the dictionary\n   ",
    "\n    grade_table = [\n        ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'B-', 'B', 'C+', 'C', 'C-', 'C'],\n        ['A', 'A+', 'A-', 'B', 'B+', 'B-', 'B-', 'B', 'C', 'C+', 'C', 'C-', 'C'],\n        ['B', 'B+', 'B-', 'B', 'B', 'B-', 'B-', 'B', 'C', 'C', 'C-', 'C'],\n        ['C', 'C+', 'C-', 'C', 'C', 'C-', 'C-', 'C', 'D', 'D', 'D-', 'D'],\n        ['D', 'D+', 'D-', 'D', 'D', 'D-', 'D-', 'D', 'E', 'E', 'E-', 'E'],\n        ['E', 'E+', 'E-', 'E', 'E', 'E-', 'E-', 'E', 'F', 'F', 'F-', 'F'],\n    ]\n    return grade_table[grades.index(max(grades))]\n",
    "\n    # TODO: Implement the function\n    # return [grade_table[grade] for grade in grades]\n    return [grade_table[grade] for grade in grades]\n",
    "\n    grades = [float(x) for x in grades]\n    grades.sort()\n    grade_list = []\n    for grade in grades:\n        if grade >= 3.7:\n            grade_list.append('A+')\n        elif grade >= 3.3:\n            grade_list.append('A')\n        elif grade >= 3.0:\n            grade_list.append('A-')\n        elif grade >= 2.7:\n            grade_list.append('B+')\n        elif grade >= 2.3:\n            grade_list.append('B')\n        elif grade >= 2.0:\n            grade_list.append('B-')\n        elif grade >= 1.7:\n            grade_list.append('C+')\n        elif grade >= 1.3:\n            grade_list.append('C')\n        elif grade >= 1.0:\n            grade_list.append('C-')\n        elif grade >= 0.7:\n            grade_list.append('D+')\n        elif grade >= 0.0:\n            grade_list.append('D')\n        else:\n            grade_list.append('E')\n    return grade_list\n",
    "\n    grades = [float(x) for x in grades]\n    letter_grades = [\n        'A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'E'\n    ]\n    return [letter_grades[i] for i in sorted(enumerate(grades), key=lambda x: x[1])]\n",
    "\n    # your code here\n    grades = [float(x) for x in grades]\n    grade_table = {\n        'A+': 'A',\n        'A': 'A',\n        'A-': 'A-',\n        'B+': 'B+',\n        'B': 'B',\n        'B-': 'B-',\n        'C+': 'C+',\n        'C': 'C',\n        'D+': 'D+',\n        'D': 'D',\n        'E': 'E'\n    }\n    return [grade_table[grade] for grade in grades]\n",
    "\n    # Your code here\n    grades = list(map(lambda x: x/10, grades))\n    grades.sort()\n    grades.reverse()\n    return grades\n",
    "\n    # Your code here\n    grades = [float(x) for x in grades]\n    letter_grades = ['A', 'A+', 'B', 'C-', 'C', 'B+', 'D', 'E']\n    return [letter_grades[i] for i in sorted(set(grades))]\n",
    "\n    grades = [float(x) for x in grades]\n    letter_grade = []\n    for i in range(len(grades)):\n        if grades[i] >= 3.7:\n            letter_grade.append('A+')\n        elif grades[i] >= 3.3:\n            letter_grade.append('A')\n        elif grades[i] >= 3.0:\n            letter_grade.append('A-')\n        elif grades[i] >= 2.7:\n            letter_grade.append('B+')\n        elif grades[i] >= 2.3:\n            letter_grade.append('B')\n        elif grades[i] >= 2.0:\n            letter_grade.append('B-')\n        elif grades[i] >= 1.7:\n            letter_grade.append('C+')\n        elif grades[i] >= 1.3:\n            letter_grade.append('C')\n        elif grades[i] >= 1.0:\n            letter_grade.append('D+')\n        elif grades[i] >= 0.7:\n            letter_grade.append('D')\n        elif grades[i] >= 0.0:\n            letter_grade.append('E')\n    return letter_grade\n",
    "\n    grades = list(map(lambda x: x, grades))\n    grades.sort()\n    grades.reverse()\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades\n",
    "\n    # Your code here\n    grades = [float(x) for x in grades]\n    grade_table = [['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']]\n    return grade_table[grades.index(max(grades))]\n",
    "\n    # your code here\n    grades = list(map(lambda x: x/100, grades))\n    grades = sorted(grades)\n    grades = [str(x) for x in grades]\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x for x in grades if x != '']\n    grades = [x",
    "\n    grades = list(map(lambda x: x, grades))\n    return [str(x) for x in grades]\n",
    "\n    grades = list(map(lambda x: x, grades))\n    grades.sort()\n    grades.reverse()\n    return [str(x) for x in grades]\n",
    "\n    grades = [float(x) for x in grades]\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append('A+')\n        elif grade >= 3.7:\n            letter_grades.append('A')\n        elif grade >= 3.3:\n            letter_grades.append('A-')\n        elif grade >= 3.0:\n            letter_grades.append('B+')\n        elif grade >= 2.7:\n            letter_grades.append('B')\n        elif grade >= 2.3:\n            letter_grades.append('B-')\n        elif grade >= 2.0:\n            letter_grades.append('C+')\n        elif grade >= 1.7:\n            letter_grades.append('C')\n        elif grade >= 1.3:\n            letter_grades.append('C-')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n    return letter_grades\n",
    "\n    grades = [float(x) for x in grades]\n    letter_grades = ['A+', 'B', 'C-', 'C', 'A-']\n    return [letter_grades[i] for i in sorted(enumerate(grades), key=lambda x: x[1])]\n",
    "\n    grade_table = {\n        'A+': 'A',\n        'A': 'A',\n        'A-': 'A-',\n        'B+': 'B+',\n        'B': 'B',\n        'B-': 'B-',\n        'C+': 'C+',\n        'C': 'C',\n        'C-': 'C-',\n        'D+': 'D+',\n        'D': 'D',\n        'E': 'E'\n    }\n\n    return grade_table[grades[0]] + ' ' + grade_table[grades[1]] + ' ' + grade_table[grades[2]] + ' ' + grade_table[grades[3]] + ' ' + grade_table[grades[4]]\n"
  ]
}