{
  "problem_id": "HumanEval_119_match_parens",
  "prompt": "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"",
  "completions": [
    "\n    if len(lst) == 1:\n        return lst[0] == '('\n    if len(lst) == 2:\n        return lst[0] == '(' and lst[1] == ')'\n    if lst[0] == '(' and lst[1] == ')':\n        return match_parens(lst[1:]) == 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return match_parens(lst[1:]) == 'Yes'\n    return 'No'\n\n",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0]",
    "\n    if not lst:\n        return 'No'\n\n    def is_good(s):\n        if s == '(':\n            return True\n        elif s == ')':\n            return False\n        else:\n            return is_good(s[1:])\n\n    return is_good(lst[0])\n",
    "\n    def is_balanced(s: str) -> bool:\n        \"\"\"\n        Check if the string is balanced.\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()()')\n        True\n        >>> is_balanced('(())')\n        False\n        >>> is_balanced('(())(())')\n        True\n        >>> is_balanced('(())(())(())')\n        False\n        >>> is_balanced('(())(())(())(())')\n        True\n        >>> is_balanced('(())(())(())(())(())')\n        False\n        >>> is_balanced('(())(())(())(())(())(())')\n        False\n        >>> is_balanced('(())(())(())(())(())(())(())')\n        False\n        >>> is_balanced('(())(())(())(())(())(())(())(())')\n        False\n        >>> is_balanced('(())(())(())(())(())(())(())(())(())(())')\n        False\n        >>> is_balanced('(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0]",
    "\n    if len(lst) == 1:\n        return 'Yes' if lst[0] == '(' else 'No'\n\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes' if lst[0] == '(' else 'No'\n\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No' if lst[0] == '(' else 'Yes'\n\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes' if lst[0] == ')' else 'No'\n\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No' if lst[0] == ')' else 'Yes'\n\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No' if lst[0] == '(' else 'Yes'\n\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No' if lst[0] == ')' else 'Yes'\n\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No' if lst[0] == '(' else 'Yes'\n\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No' if lst[0] == ')' else",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if lst[0] == lst[1]:\n        return 'Yes'\n    return 'No'\n",
    "\n    def is_balanced(s: str) -> bool:\n        \"\"\"\n        Check if the string is balanced.\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()",
    "\n    def is_balanced(s):\n        if s == '(':\n            return True\n        if s == ')':\n            return False\n        return is_balanced(s[1:-1])\n\n    def is_balanced_2(s):\n        if s == '(':\n            return True\n        if s == ')':\n            return False\n        return is_balanced_2(s[1:-1])\n\n    if not lst:\n        return 'Yes'\n    if len(lst) == 1:\n        return 'Yes'\n    if is_balanced(lst[0]):\n        return 'Yes'\n    if is_balanced_2(lst[0]):\n        return 'Yes'\n    return 'No'\n\n",
    "\n    # TODO: Implement\n    return False\n\n",
    "\n    def is_balanced(s: str) -> bool:\n        \"\"\"\n        Check if the string is balanced.\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()())')\n        False\n        >>> is_balanced('()(())')\n        True\n        >>> is_balanced('()(()(()))')\n        False\n        >>> is_balanced('()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(",
    "\n    if len(lst) == 1:\n        return lst[0] == '('\n    if len(lst) == 2:\n        return lst[0] == '(' and lst[1] == ')'\n    if lst[0] == '(' and lst[1] == ')':\n        return match_parens(lst[1:]) == '()'\n    if lst[0] == ')' and lst[1] == '(':\n        return match_parens(lst[1:]) == '()'\n    return False\n",
    "\n    def is_balanced(s):\n        if s == '':\n            return True\n        if s[0] == '(':\n            return is_balanced(s[1:])\n        if s[0] == ')':\n            return not is_balanced(s[1:])\n        return False\n    return is_balanced(lst[0])\n",
    "\n    if not lst:\n        return 'No'\n\n    def is_balanced(s):\n        \"\"\"\n        Check if the string s is balanced.\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()()')\n        False\n        >>> is_balanced('()(()')\n        True\n        >>> is_balanced('()(()(()))')\n        False\n        >>> is_balanced('()(()(()))')\n        False\n        >>> is_balanced('()(()(()))(())')\n        False\n        >>> is_balanced('()(()(()))(())(())')\n        False\n        >>> is_balanced('()(()(()))(())(())(())')\n        False\n        >>> is_balanced('()(()(()))(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    return 'No'\n",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0]",
    "\n    def is_balanced(s: str) -> bool:\n        \"\"\"\n        Check if the string is balanced.\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()())')\n        True\n        >>> is_balanced('()(()')\n        True\n        >>> is_balanced('()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(",
    "\n    if len(lst) == 1:\n        return lst[0] == '('\n    if len(lst) == 2:\n        return lst[0] == '(' and lst[1] == ')'\n    if len(lst) == 3:\n        return lst[0] == '(' and lst[1] == ')' and lst[2] == '('\n    if len(lst) == 4:\n        return lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')'\n    if len(lst) == 5:\n        return lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == '('\n    if len(lst) == 6:\n        return lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == '(' and lst[5] == ')'\n    if len(lst) == 7:\n        return lst[0] == '(' and lst[1] == ')' and lst[2] == '(' and lst[3] == ')' and lst[4] == '(' and lst[5] == '(' and lst[6] == ')",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] ==",
    "\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == ')':\n        return match_parens(lst[1:])\n    if lst[0] == '(':\n        return match_parens(lst[1:])\n"
  ]
}