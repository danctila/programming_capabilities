{
  "problem_id": "HumanEval_114_minSubArraySum",
  "prompt": "from typing import List\n\ndef minSubArraySum(nums: List[int]) -> int:\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    >>> minSubArraySum([2, 3, 4, 1, 2, 4])\n    1\n    >>> minSubArraySum([-1, -2, -3])\n    -6\n    \"\"\"",
  "completions": [
    "\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    min_start = 0\n    for i in range(len(nums)):\n        min_sum = min(min_sum, nums[i] + min_start)\n        min_start = min(min_start, i)\n    return min_sum\n",
    "\n    if not nums:\n        return 0\n    n = len(nums)\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = min(dp[i - 1] + nums[i], nums[i])\n    return dp[n - 1]\n",
    "\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum_so_far = 0\n        for j in range(i, len(nums)):\n            sum_so_far += nums[j]\n            if sum_so_far < 0:\n                sum_so_far = 0\n            min_sum = min(min_sum, sum_so_far)\n    return min_sum\n",
    "\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum_so_far = 0\n        for j in range(i, len(nums)):\n            sum_so_far += nums[j]\n            if sum_so_far < 0:\n                sum_so_far = 0\n            min_sum = min(min_sum, sum_so_far)\n    return min_sum\n",
    "\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum_so_far = 0\n        for j in range(i, len(nums)):\n            sum_so_far += nums[j]\n            if sum_so_far < min_sum:\n                min_sum = sum_so_far\n            if sum_so_far < 0:\n                sum_so_far = 0\n        if sum_so_far < min_sum:\n            min_sum = sum_so_far\n    return min_sum\n",
    "\n    if not nums:\n        return 0\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum_so_far = 0\n        for j in range(i, len(nums)):\n            sum_so_far += nums[j]\n            if sum_so_far < min_sum:\n                min_sum = sum_so_far\n        if min_sum == float('inf'):\n            break\n    return min_sum\n",
    "\n    if not nums:\n        return 0\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    min_index = 0\n    for i in range(len(nums)):\n        if min_sum > 0:\n            min_sum = min(min_sum + nums[i], nums[i])\n        else:\n            min_sum = nums[i]\n        if min_sum < 0:\n            min_sum = 0\n        min_index = i if min_sum < min_sum else min_index\n    return min_index + 1 if min_index < len(nums) - 1 else 0\n",
    "\n    if not nums:\n        return 0\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    sum_so_far = 0\n    for num in nums:\n        sum_so_far += num\n        if sum_so_far < 0:\n            sum_so_far = 0\n        if sum_so_far < min_sum:\n            min_sum = sum_so_far\n    return min_sum\n",
    "\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum_so_far = 0\n        for j in range(i, len(nums)):\n            sum_so_far += nums[j]\n            if sum_so_far < min_sum:\n                min_sum = sum_so_far\n        if min_sum == float('inf'):\n            break\n    return min_sum\n",
    "\n    if not nums:\n        return 0\n    n = len(nums)\n    if n == 0:\n        return 0\n    sum_so_far = 0\n    min_so_far = float('inf')\n    for i in range(n):\n        sum_so_far += nums[i]\n        if sum_so_far < 0:\n            sum_so_far = 0\n        if sum_so_far < min_so_far:\n            min_so_far = sum_so_far\n        if sum_so_far < 0:\n            sum_so_far = 0\n    return min_so_far\n",
    "\n    if not nums:\n        return 0\n    n = len(nums)\n    if n == 0:\n        return 0\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = min(dp[i - 1] + nums[i], nums[i])\n        if dp[i] < 0:\n            dp[i] = 0\n    return dp[n - 1]\n",
    "\n    if not nums:\n        return 0\n    \n    n = len(nums)\n    if n == 0:\n        return 0\n    \n    min_sum = float('inf')\n    min_start = 0\n    min_end = 0\n    for i in range(n):\n        min_end = i\n        while min_end < n and nums[min_end] >= 0:\n            min_sum = min(min_sum, nums[min_end] + min_end - min_start)\n            min_end += 1\n        min_start = min_end - 1\n    return min_sum\n",
    "\n    if not nums:\n        return 0\n    start, end, sum_so_far = 0, 0, 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum_so_far = sum_so_far + nums[i]\n        if sum_so_far < 0:\n            sum_so_far = 0\n        if sum_so_far < min_sum:\n            min_sum = sum_so_far\n        if sum_so_far < 0:\n            sum_so_far = 0\n        if sum_so_far < min_sum:\n            min_sum = sum_so_far\n        if sum_so_far < 0:\n            sum_so_far = 0\n        if sum_so_far < min_sum:\n            min_sum = sum_so_far\n        if sum_so_far < 0:\n            sum_so_far = 0\n        if sum_so_far < min_sum:\n            min_sum = sum_so_far\n        if sum_so_far < 0:\n            sum_so_far = 0\n        if sum_so_far < min_sum:\n            min_sum = sum_so_far\n        if sum_so_far < 0:\n            sum_so_far = 0\n        if sum_so_",
    "\n    if not nums:\n        return 0\n    n = len(nums)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        dp[i] = float('inf')\n        for j in range(i):\n            dp[i] = min(dp[i], dp[j] + nums[j])\n        dp[i] = min(dp[i], dp[i] + nums[i])\n    return dp[n]\n",
    "\n    if not nums:\n        return 0\n    n = len(nums)\n    if n < 1:\n        return 0\n\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = min(dp[i - 1] + nums[i], nums[i])\n        if dp[i] == nums[i]:\n            return i\n\n    return -1\n",
    "\n    if not nums:\n        return 0\n    left, right = 0, 0\n    min_sum = float('inf')\n    while right < len(nums):\n        while left < right and nums[left] < 0:\n            left += 1\n        while left < right and nums[right] < 0:\n            right -= 1\n        if right - left + 1 < min_sum:\n            min_sum = right - left + 1\n        left += 1\n        right += 1\n    return min_sum\n",
    "\n    if not nums:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    min_sum = nums[0]\n    for i in range(1, len(nums)):\n        min_sum = min(min_sum + nums[i], nums[i])\n    return min_sum\n",
    "\n    if not nums:\n        return 0\n\n    min_sum = float('inf')\n    min_index = 0\n    for i in range(len(nums)):\n        min_sum = min(min_sum, nums[i] + min_index)\n        min_index = min(min_index, i + 1)\n\n    return min_sum\n\n",
    "\n    if not nums:\n        return 0\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum_so_far = 0\n        for j in range(i, len(nums)):\n            sum_so_far += nums[j]\n            if sum_so_far < min_sum:\n                min_sum = sum_so_far\n    return min_sum\n",
    "\n    if not nums:\n        return -1\n    min_sum = float('inf')\n    for i in range(len(nums)):\n        sum_so_far = 0\n        for j in range(i, len(nums)):\n            sum_so_far += nums[j]\n            if sum_so_far < min_sum:\n                min_sum = sum_so_far\n        if min_sum == float('inf'):\n            break\n    return min_sum\n"
  ]
}