{
  "problem_id": "HumanEval_158_find_max",
  "prompt": "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    >>> find_max(['name', 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\"",
  "completions": [
    "\n    return max(set(words), key=len)\n",
    "\n    return max(set(words), key=len)\n\n",
    "\n    return max(set(words), key=len)\n\n",
    "\n    return max(set(word.lower() for word in words), key=len)\n",
    "\n    return max(set(words), key=len)\n",
    "\n    max_count = 0\n    max_word = ''\n    for word in words:\n        count = 0\n        for char in word:\n            count += 1\n        if count > max_count:\n            max_count = count\n            max_word = word\n    return max_word\n",
    "\n    return max(set(words), key=len)\n\n",
    "\n    return max(set(words), key=len)\n\n",
    "\n    return max(set(words), key=len)\n\n",
    "\n    # your code here\n    return max(words, key=len)\n\n",
    "\n    return max(set(words), key=len)\n\n",
    "\n    return max(set(words), key=len)\n\n",
    "\n    return max(set(words), key=len)\n",
    "\n    return max(set(word.lower() for word in words), key=len)\n\n",
    "\n    # TODO: Write your solution here\n    return max(set(word.lower() for word in words), key=len)\n\n",
    "\n    return max(set(word.lower() for word in words), key=len)\n\n",
    "\n    return max(set(word) for word in words)\n",
    "\n    # Your code here\n    return max(set(words), key=len)\n\n",
    "\n    return max(set(words), key=len)\n",
    "\n    return max(set(words), key=len)\n\n"
  ]
}