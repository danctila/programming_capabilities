{
  "problem_id": "HumanEval_100_make_a_pile",
  "prompt": "from typing import List\n\ndef make_a_pile(n: int) -> List[int]:\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"",
  "completions": [
    "\n    if n % 2 == 0:\n        return [n // 2] + make_a_pile(n // 2)\n    else:\n        return [n // 2] + make_a_pile(n // 2) + [n // 2]\n",
    "\n    if n % 2 == 0:\n        return [n // 2] + make_a_pile(n // 2)\n    else:\n        return [n // 2] + make_a_pile(n // 2 - 1)\n\n",
    "\n    if n % 2 == 0:\n        return [n // 2]\n    else:\n        return [n // 2 + 1]\n",
    "\n    if n % 2 == 0:\n        return [n // 2] * (n // 2)\n    else:\n        return [n // 2 + 1] * (n // 2)\n\n",
    "\n    if n % 2 == 0:\n        return [n // 2] + make_a_pile(n // 2)\n    return [n // 2] + make_a_pile(n // 2)\n",
    "\n    if n == 1:\n        return [1]\n    else:\n        return [n % 2] + make_a_pile(n // 2)\n\n",
    "\n    if n % 2 == 0:\n        return [n // 2] * (n // 2)\n    else:\n        return [n // 2 + 1] * (n // 2)\n\n",
    "\n    if n == 1:\n        return [n]\n    else:\n        return [n] + make_a_pile(n - 1)\n",
    "\n    return [n % 2 for _ in range(n)]\n\n",
    "\n    return [n % 2 for _ in range(n)]\n\n",
    "\n    if n % 2 == 0:\n        return [n // 2] * (n // 2)\n    else:\n        return [n // 2 + 1] * (n // 2)\n\n",
    "\n    if n % 2 == 0:\n        return [n]\n    return [n + 1] + [n + 2] * (n - 2)\n\n",
    "\n    if n % 2 == 0:\n        return [n // 2] + make_a_pile(n // 2)\n    else:\n        return [n // 2] + make_a_pile(n // 2) + [n // 2]\n",
    "\n    if n == 1:\n        return [n]\n    else:\n        return [n] + make_a_pile(n // 2)\n",
    "\n    if n % 2 == 0:\n        return [n // 2] * (n // 2)\n    return [n // 2 + 1] * (n // 2)\n\n",
    "\n    if n % 2 == 0:\n        return [n // 2] + make_a_pile(n // 2)\n    else:\n        return [n // 2] + make_a_pile(n // 2 - 1)\n",
    "\n    return [n] + list(range(2, n+1))\n",
    "\n    if n % 2 == 0:\n        return [n // 2] + make_a_pile(n // 2)\n    else:\n        return [n // 2] + make_a_pile(n // 2) + [n // 2]\n\n",
    "\n    if n % 2 == 0:\n        return [n // 2] + make_a_pile(n // 2)\n    else:\n        return [n // 2] + make_a_pile(n // 2 + 1)\n\n",
    "\n    if n % 2 == 0:\n        return [n // 2 + 1] * (n // 2 + 1)\n    else:\n        return [n // 2] * (n // 2 + 1)\n"
  ]
}