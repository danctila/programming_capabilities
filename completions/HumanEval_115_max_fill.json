{
  "problem_id": "HumanEval_115_max_fill",
  "prompt": "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n    >>> max_fill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2)\n    5\n    \n    Example 3:\n    >>> max_fill([[0, 0, 0], [0, 0, 0]], 5)\n    0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"",
  "completions": [
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][-1]:\n        return ",
    "\n    if grid[0][0] == 0:\n        return 0\n    if grid[0][0] == 1:\n        return 1\n    if grid[0][0] == 2:\n        return 2\n    if grid[0][0] == 3:\n        return 3\n    if grid[0][0] == 4:\n        return 4\n    if grid[0][0] == 5:\n        return 5\n    if grid[0][0] == 6:\n        return 6\n    if grid[0][0] == 7:\n        return 7\n    if grid[0][0] == 8:\n        return 8\n    if grid[0][0] == 9:\n        return 9\n    if grid[0][0] == 10:\n        return 10\n    if grid[0][0] == 11:\n        return 11\n    if grid[0][0] == 12:\n        return 12\n    if grid[0][0] == 13:\n        return 13\n    if grid[0][0] == 14:\n        return 14\n    if grid[0][0] == 15:\n        return 15\n    if grid[0][0] == 16:\n        return 16\n    if grid[0][0] == 17:\n       ",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[grid.shape[0] - 1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if grid[0][0] + grid[grid.shape[0] - 1][grid.shape[1] - 1] > capacity:\n        return 0\n    return 1 + max_fill(grid[1:], capacity)\n",
    "\n    if not grid:\n        return 0\n    if len(grid) == 1:\n        return 1\n    if len(grid) == 2:\n        return 1 if grid[0][0] == 1 else 0\n    if len(grid) == 3:\n        return 1 if grid[0][0] == 1 else 0\n    if len(grid) == 4:\n        return 1 if grid[0][0] == 1 else 0\n    if len(grid) == 5:\n        return 1 if grid[0][0] == 1 else 0\n    if len(grid) == 6:\n        return 1 if grid[0][0] == 1 else 0\n    if len(grid) == 7:\n        return 1 if grid[0][0] == 1 else 0\n    if len(grid) == 8:\n        return 1 if grid[0][0] == 1 else 0\n    if len(grid) == 9:\n        return 1 if grid[0][0] == 1 else 0\n    if len(grid) == 10:\n        return 1 if grid[0][0] == 1 else 0\n    if len(grid) == 11:\n        return 1 if grid[0][0] == 1 else 0\n    if len(grid",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][-1]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][0]:\n        return 0\n    if not grid[0][-1]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][-1]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][0]:\n        return 0\n    if not grid[0][-1]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][-1]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][-1]:\n        return 0\n    if not grid[-1][-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[-1][0]:",
    "\n    def fill(grid, capacity, start, end):\n        if start == end:\n            return 0\n        if grid[start][end] == 1:\n            return 1\n        if grid[start][end] == 0:\n            return fill(grid, capacity, start, end + 1)\n        return fill(grid, capacity, start, end + 1) + fill(grid, capacity, start + 1, end)\n\n    return fill(grid, capacity, 0, 0)\n",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[grid.shape[0] - 1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if grid[0][0] + grid[grid.shape[0] - 1][grid.shape[1] - 1] > capacity:\n        return 0\n    if grid[0][0] + grid[grid.shape[0] - 1][grid.shape[1] - 1] > capacity:\n        return 0\n    if grid[0][0] + grid[grid.shape[0] - 1][grid.shape[1] - 1] > grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if grid[0][0] + grid[grid.shape[0] - 1][grid.shape[1] - 1] > grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if grid[0][0] + grid[grid.shape[0] - 1][grid.shape[1]",
    "\n    if not grid or not grid[0]:\n        return 0\n\n    def dfs(grid, i, j, capacity):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]) or grid[i][j] == 0:\n            return 0\n\n        if grid[i][j] == 1:\n            return 1\n\n        if grid[i][j] > capacity:\n            return 0\n\n        return dfs(grid, i - 1, j, capacity) + dfs(grid, i, j - 1, capacity) + dfs(grid, i + 1, j, capacity) + dfs(grid, i, j + 1, capacity)\n\n    return max(dfs(grid, len(grid) - 1, len(grid[0]) - 1, capacity))\n\n",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[-1]:\n        return 0\n    if grid[0][0] == 1:\n        return 0\n    if grid[-1][-1] == 1:\n        return 0\n    if grid[0][-1] == 1:\n        return 0\n    if grid[-1][0] == 1:\n        return 0\n    if grid[0][-1] == 1:\n        return 0\n    if grid[-1][-1] == 1:\n        return 0\n    if grid[0][0] == 1:\n        return 0\n    if grid[-1][-1] == 1:\n        return 0\n    if grid[0][-1] == 1:\n        return 0\n    if grid[-1][0] == 1:\n        return 0\n    if grid[0][-1] == 1:\n        return 0\n    if grid[0][-1] == 1:\n        return 0\n    if grid[-1][-1] == 1:\n        return 0\n    if grid[0][0] == 1:\n        return 0\n    if grid[-1][-1] == 1:\n        return 0\n    if grid[0][-1] == 1:\n        return 0\n    if",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[grid[0].length - 1]:\n        return 0\n    if not grid[grid[0].length - 1][0]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1][0]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1][grid[0].length - 1]:\n        return 0\n    if grid[0][0] == 0:\n        return 0\n    if grid[0][grid[0].length - 1] == 0:\n        return 0\n    if grid[grid[0].length - 1][0] == 0:\n        return 0\n    if grid[grid[0].length - 1][grid[0].length - 1] == 0:\n        return 0\n    if grid[grid[0].length - 1][grid[0].length - 1][0] == 0:\n        return 0\n    if grid[grid[0].length - 1][grid[0].length - 1][grid[0].",
    "\n    if not grid or not grid[0]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[0][grid[0].length - 1]:\n        return 0\n    if not grid[grid[0].length - 1][0]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1]:\n        return 0\n    if grid[0][0] == 1:\n        return 1\n    if grid[0][grid[0].length - 1] == 1:\n        return 1\n    if grid[grid[0].length - 1][0] == 1:\n        return 1\n    if grid[grid[0].length - 1][grid[0].length - 1] == 1:\n        return 1\n    if grid[0][0] == 1:\n        return 1\n    if grid[0][grid[0].length - 1] == 1:\n        return 1\n    if grid[grid[0].length - 1][grid[0].length - 1] == 1:\n        return 1\n    if grid[0][0] == 1:\n        return 1\n    if grid[0][grid[0].length - 1] == 1:\n        return 1\n    if grid[grid[",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[grid.shape[0] - 1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if grid[0][0] < 0 or grid[grid.shape[0] - 1][grid.shape[1] - 1] < 0:\n        return 0\n    if grid[grid.shape[0] - 1][grid.shape[1] - 1] < 0:\n        return 0\n    if grid[0][0] < grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if grid[grid.shape[0] - 1][grid.shape[1] - 1] < grid[0][0]:\n        return 0\n    if grid[grid.shape[0] - 1][grid.shape[1] - 1] < grid[0][0]:\n        return 0\n    if grid[grid.shape[0] - 1][grid.shape[1] - 1] < grid[0][0]:\n        return 0\n    if grid[grid",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[-1]:\n        return 0\n    if grid[0][0] == 1:\n        return 0\n    if grid[-1][-1] == 1:\n        return 0\n    if grid[0][-1] == 1:\n        return 0\n    if grid[-1][0] == 1:\n        return 0\n    if grid[0][-1] == 1:\n        return 0\n    if grid[-1][-1] == 1:\n        return 0\n    if grid[0][0] == 1:\n        return 0\n    if grid[-1][0] == 1:\n        return 0\n    if grid[0][-1] == 1:\n        return 0\n    if grid[-1][-1] == 1:\n        return 0\n    if grid[0][-1] == 1:\n        return 0\n    if grid[-1][-1] == 1:\n        return 0\n    if grid[0][0] == 1:\n        return 0\n    if grid[-1][0] == 1:\n        return 0\n    if grid[0][-1] == 1:\n        return 0\n    if grid[-1][-1] == 1:\n        return 0\n    if grid",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[grid.shape[0] - 1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[grid.shape[0] - 1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if not grid[0][0]:",
    "\n    if not grid:\n        return 0\n\n    def dfs(grid, i, j):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]):\n            return 0\n        if grid[i][j] == 1:\n            return 1\n        if grid[i][j] == 0:\n            return 0\n        if grid[i][j] == 1:\n            return 1\n        return 0\n\n    def dfs_recurse(grid, i, j, capacity):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]):\n            return 0\n        if grid[i][j] == 1:\n            return 1\n        if grid[i][j] == 0:\n            return 0\n        if grid[i][j] == 1:\n            return 1\n        return 0\n\n    if not grid:\n        return 0\n\n    def dfs_recurse_recurse(grid, i, j, capacity):\n        if i < 0 or j < 0 or i >= len(grid) or j >= len(grid[0]):\n            return 0\n        if grid[i][j] == 1:\n            return 1\n        if grid[i][j] == 0:\n            return 0\n        if grid[",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[-1]:\n        return 0\n    if len(grid) == 1:\n        return 0\n    if len(grid[0]) == 1:\n        return 0\n    if len(grid) == 2:\n        return 0\n    if len(grid[0]) == 2:\n        return 0\n    if len(grid) == 3:\n        return 0\n    if len(grid[0]) == 3:\n        return 0\n    if len(grid) == 4:\n        return 0\n    if len(grid[0]) == 4:\n        return 0\n    if len(grid) == 5:\n        return 0\n    if len(grid[0]) == 5:\n        return 0\n    if len(grid) == 6:\n        return 0\n    if len(grid) == 6:\n        return 0\n    if len(grid) == 7:\n        return 0\n    if len(grid) == 7:\n        return 0\n    if len(grid) == 8:\n        return 0\n    if len(grid) == 8:\n        return 0\n    if len(grid) == 9:\n        return 0\n    if len(grid) == 9:\n        return 0\n    if len(grid) ==",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[grid[0].length - 1]:\n        return 0\n    if not grid[grid[0].length - 1][0]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1]:\n        return 0\n    if not grid[grid[0].length - 1][grid[0].length - 1]:\n        return ",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[grid.shape[0]-1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[grid.shape[0]-1][grid.shape[1]-1]:\n        return 0\n    if not grid[grid.shape[0]-1][grid.shape[1]-1]:\n        return 0\n    if not grid[grid.shape[0]-1][grid.shape[1]-1]:\n        return 0\n    if not grid[grid.shape[0]-1][grid.shape[1]-1]:\n        return 0\n    if not grid[grid.shape[0]-1][grid.shape[1]-1]:\n        return 0\n    if not grid[grid.shape[0]-1][grid.shape[1]-1]:\n        return 0\n    if not grid[grid.shape[0]-1][grid.shape[1]-1]:\n        return 0\n    if not grid[grid.shape[0]-1][grid.shape[1]-1]:\n        return 0\n    if not grid[grid.shape[0]-1][grid.shape[1]-1]:\n        return 0\n    if not grid[grid.shape[0]-1][grid.shape[1]-1]:\n        return 0",
    "\n    if not grid:\n        return 0\n    if not grid[0]:\n        return 0\n    if not grid[grid.shape[0] - 1]:\n        return 0\n    if not grid[0][0]:\n        return 0\n    if not grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if grid[0][0] == grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if grid[0][0] == grid[grid.shape[0] - 1][0]:\n        return 0\n    if grid[grid.shape[0] - 1][grid.shape[1] - 1] == grid[0][0]:\n        return 0\n    if grid[grid.shape[0] - 1][grid.shape[1] - 1] == grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if grid[grid.shape[0] - 1][grid.shape[1] - 1] == grid[grid.shape[0] - 1][grid.shape[1] - 1]:\n        return 0\n    if grid[grid.shape[0] - 1][grid.shape[1]"
  ]
}