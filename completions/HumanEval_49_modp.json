{
  "problem_id": "HumanEval_49_modp",
  "prompt": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"",
  "completions": [
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    if p == 0:\n        return 0\n    if p == 1:\n        return 1\n    if p == 2:\n        return 1\n    if p == 3:\n        return 2\n    if p == 4:\n        return 3\n    if p == 5:\n        return 4\n    if p == 6:\n        return 5\n    if p == 7:\n        return 6\n    if p == 8:\n        return 7\n    if p == 9:\n        return 8\n    if p == 10:\n        return 9\n    if p == 11:\n        return 10\n    if p == 12:\n        return 11\n    if p == 13:\n        return 12\n    if p == 14:\n        return 13\n    if p == 15:\n        return 14\n    if p == 16:\n        return 15\n    if p == 17:\n        return 16\n    if p == 18:\n        return 17\n    if p == 19:\n        return 18\n    if p == 20:\n        return 19\n    if p == 21:\n        return 20\n    if p == 22:\n        return 21\n    if p == 23:\n        return 22\n    if p == 24:\n       ",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return 2 ** n % p\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return pow(2, n, p)\n\n",
    "\n    return 2 ** n % p\n\n"
  ]
}