{
  "problem_id": "HumanEval_111_histogram",
  "prompt": "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1, 'b': 1, 'c': 1 }\n    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('a b c a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b b a')\n    { 'b': 4 }\n    >>> histogram('')\n    {  }\n\n    \"\"\"",
  "completions": [
    "\n    # TODO: Implement this function\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    #\n    # Example:\n    # >>> histogram('a b c')\n    # { 'a': 1, 'b': 1, 'c': 1 }\n    # >>> histogram('a b b a')\n    # { 'a': 2, 'b': 2 }\n    # >>> histogram('a b c a b')\n    # { 'a': 2, 'b': 2 }\n    # >>> histogram('b b b b a')\n    # { 'b': 4 }\n    # >>> histogram('')\n    # {  }\n\n    # TODO: Implement this function\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    #\n    # Example:\n    # >>> histogram('a b c')\n    # { 'a': 1, 'b': 1, 'c': 1 }\n    # >>> histogram('a b b a')\n    # { 'a': 2, 'b': 2 }\n    # >>> histogram('a b c a b')\n    # { 'a': 2, 'b': 2 }\n    # >>> histogram('b b b b a')\n    # { '",
    "\n    # TODO: Implement this function\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return",
    "\n    if not test:\n        return {}\n    return { letter: count for letter, count in Counter(test).items() }\n",
    "\n    return { letter: count for letter, count in Counter(test).items() }\n",
    "\n    # TODO: Implement this function\n    return {}\n",
    "\n    return dict(Counter(test).most_common())\n",
    "\n    if test == '':\n        return {}\n    if test in test:\n        return {test: 1}\n    return {test: 1}\n",
    "\n    return {letter: count for letter, count in Counter(test).items() if count > 1}\n",
    "\n    counts = {}\n    for letter in test:\n        if letter not in counts:\n            counts[letter] = 1\n        else:\n            counts[letter] += 1\n    return counts\n",
    "\n    # TODO: Implement this function\n    return {}\n",
    "\n    # TODO: Implement this function\n    return {}\n",
    "\n    if not test:\n        return {}\n    return {letter: test.count(letter) for letter in test}\n",
    "\n    letters = set(test)\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return counts\n",
    "\n    counts = {}\n    for letter in test:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return counts\n",
    "\n    return { letter: test.count(letter) for letter in test }\n",
    "\n    # TODO: Implement this function\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    #\n    # Example:\n    # >>> histogram('a b c')\n    # { 'a': 1, 'b': 1, 'c': 1 }\n    # >>> histogram('a b b a')\n    # { 'a': 2, 'b': 2 }\n    # >>> histogram('a b c a b')\n    # { 'a': 2, 'b': 2 }\n    # >>> histogram('b b b b a')\n    # { 'b': 4 }\n    # >>> histogram('')\n    # {  }\n\n    # TODO: Implement this function\n    # return a dictionary of the letter with the most repetition and containing the corresponding count.\n    # If several letters have the same occurrence, return all of them.\n    #\n    # Example:\n    # >>> histogram('a b c')\n    # { 'a': 1, 'b': 1, 'c': 1 }\n    # >>> histogram('a b b a')\n    # { 'a': 2, 'b': 2 }\n    # >>> histogram('a b c a b')\n    # { 'a': 2, 'b': 2 }\n    # >>> histogram('b b b b a')\n    # { '",
    "\n    # TODO: Implement this function\n    return {}\n",
    "\n    # TODO: Implement this function\n    return {}\n",
    "\n    return { letter: test.count(letter) for letter in test }\n",
    "\n    if not test:\n        return {}\n    letters = test.lower()\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n            counts[letter] += 1\n        else:\n            counts[letter] = 1\n    return counts\n"
  ]
}