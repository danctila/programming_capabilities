{
  "problem_id": "HumanEval_4_mean_absolute_deviation",
  "prompt": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"",
  "completions": [
    "\n    return sum(abs(numbers - mean(numbers))) / len(numbers)\n",
    "\n    return sum(abs(numbers - numbers.mean()) / len(numbers)) / len(numbers)\n\n",
    "\n    return sum(abs(numbers - numbers.mean()) / len(numbers)) / len(numbers)\n",
    "\n    return sum(abs(numbers - numbers.mean()) / len(numbers)) / len(numbers)\n",
    "\n    return sum(abs(numbers - mean(numbers))) / len(numbers)\n",
    "\n    return sum(abs(numbers - numbers.mean()) / len(numbers)) / len(numbers)\n",
    "\n    return sum(abs(numbers - numbers.mean()) / len(numbers)) / len(numbers)\n",
    "\n    return sum(abs(numbers - numbers.mean()) / len(numbers)) / len(numbers)\n\n",
    "\n    return sum(abs(numbers - numbers.mean())) / len(numbers)\n",
    "\n    return sum(abs(numbers - mean(numbers))) / len(numbers)\n",
    "\n    return sum(abs(numbers - numbers.mean()) / len(numbers)) / len(numbers)\n",
    "\n    return sum(abs(numbers - numbers.mean()) / len(numbers)) / len(numbers)\n",
    "\n    return sum(abs(numbers - numbers.mean()) / len(numbers)) / len(numbers)\n",
    "\n    return sum(abs(numbers - numbers.mean()) / len(numbers)) / len(numbers)\n",
    "\n    return mean(abs(numbers - mean(numbers)))\n\n",
    "\n    return sum(abs(numbers - mean(numbers)) / len(numbers)) / len(numbers)\n",
    "\n    return sum(abs(numbers - mean(numbers)) / len(numbers)) / len(numbers)\n\n",
    "\n    return sum(abs(numbers - numbers.mean()) / len(numbers) * 100) / len(numbers)\n\n",
    "\n    return sum(abs(numbers - mean(numbers))) / len(numbers)\n\n",
    "\n    return sum(abs(numbers - mean(numbers))) / len(numbers)\n"
  ]
}