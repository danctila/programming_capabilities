{
  "problem_id": "HumanEval_80_is_happy",
  "prompt": "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy('a')\n    False\n    >>> is_happy('aa')\n    False\n    >>> is_happy('abcd')\n    True\n    >>> is_happy('aabb')\n    False\n    >>> is_happy('adb')\n    True\n    >>> is_happy('xyy')\n    False\n    \"\"\"",
  "completions": [
    "\n    if len(s) < 3:\n        return False\n    if not s:\n        return True\n    for i in range(1, len(s) - 1):\n        if s[i] != s[i - 1] and s[i] != s[i + 1]:\n            return False\n    return True\n\n",
    "\n    if len(s) < 3:\n        return False\n    if s[0] == s[-1]:\n        return is_happy(s[1:-1])\n    return False\n\n",
    "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i:i + 3] == s[i:i + 3][::-1]:\n            return False\n    return True\n\n",
    "\n    if len(s) < 3:\n        return False\n    if not s[0] in 'abc':\n        return False\n    if not s[1] in 'abc':\n        return False\n    if not s[2] in 'abc':\n        return False\n    return True\n\n",
    "\n    if len(s) < 3:\n        return False\n    if s[0] == s[1] and s[1] == s[2]:\n        return True\n    return False\n\n",
    "\n    if len(s) < 3:\n        return False\n    if s[0] == s[-1]:\n        return is_happy(s[1:-1])\n    return False\n\n",
    "\n    if len(s) < 3:\n        return False\n    if not s:\n        return True\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] and s[i + 2] == s[i + 3]:\n            return False\n    return True\n\n",
    "\n    if len(s) < 3:\n        return False\n    if s[0] == s[-1]:\n        return is_happy(s[1:-1])\n    return not is_happy(s[1:-1])\n\n",
    "\n    if len(s) < 3:\n        return False\n    # check if every 3 consecutive letters are distinct\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] and s[i + 1] == s[i + 2]:\n            return False\n    return True\n\n",
    "\n    if len(s) < 3:\n        return False\n    if s[0] == s[-1]:\n        return is_happy(s[1:-1])\n    return False\n\n",
    "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i:i + 3] == s[i:i + 3][::-1]:\n            return False\n    return True\n\n",
    "\n    if len(s) < 3:\n        return False\n    if s[0] == s[-1]:\n        return is_happy(s[1:-1])\n    return False\n\n",
    "\n    if len(s) < 3:\n        return False\n    hash_map = {}\n    for i in range(len(s)):\n        if s[i] not in hash_map:\n            hash_map[s[i]] = 1\n        else:\n            hash_map[s[i]] += 1\n    for i in range(len(s) - 2):\n        if hash_map[s[i]] == 1 and hash_map[s[i + 1]] == 1 and hash_map[s[i + 2]] == 1:\n            return False\n    return True\n\n",
    "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] and s[i + 2] != s[i]:\n            return False\n    return True\n\n",
    "\n    if len(s) < 3:\n        return False\n    if s[0] == s[-1]:\n        return is_happy(s[1:-1])\n    return False\n\n",
    "\n    if len(s) < 3:\n        return False\n    if not s:\n        return True\n    if s[0] == s[1] and s[1] == s[2]:\n        return is_happy(s[2:])\n    return False\n\n",
    "\n    if len(s) < 3:\n        return False\n    if s[0] == s[-1]:\n        return is_happy(s[1:-1])\n    return False\n\n",
    "\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 3):\n        if s[i] == s[i + 1] and s[i + 2] == s[i + 3]:\n            return False\n    return True\n\n",
    "\n    if len(s) < 3:\n        return False\n    if s[0] == s[-1]:\n        return is_happy(s[1:-1])\n    return not is_happy(s[1:-1])\n\n",
    "\n    if len(s) < 3:\n        return False\n    if s[0] == s[-1]:\n        return is_happy(s[1:-1])\n    return False\n\n"
  ]
}