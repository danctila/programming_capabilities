{
  "problem_id": "HumanEval_87_get_row",
  "prompt": "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    >>> get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n    [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    >>> get_row([], 1)\n    []\n    >>> get_row([[], [1], [1, 2, 3]], 3)\n    [(2, 2)]\n    \"\"\"",
  "completions": [
    "\n    lst = sorted(lst, key=lambda x: x[0])\n    return [(x[0], x[1]) for x in lst]\n",
    "\n    lst_len = len(lst)\n    if lst_len == 0:\n        return []\n    if lst_len == 1:\n        return [(x, 0)]\n    if lst_len == 2:\n        return [(x, 0), (x, 1)]\n    if lst_len == 3:\n        return [(x, 0), (x, 1), (x, 2)]\n    if lst_len == 4:\n        return [(x, 0), (x, 1), (x, 2), (x, 3)]\n    if lst_len == 5:\n        return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4)]\n    if lst_len == 6:\n        return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4), (x, 5)]\n    if lst_len == 7:\n        return [(x, 0), (x, 1), (x, 2), (x, 3), (x, 4), (x, 5), (x, 6)]\n    if lst_len == 8:\n        return [(x, 0), (x, 1), (x, 2), (x, 3",
    "\n    if not lst:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    if len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    if len(lst) == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if len(lst) == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 9:\n        return [lst[0], lst[1], lst[2], lst[3], lst[",
    "\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return lst[0]\n    if len(lst) == 3:\n        return lst[0]\n    if len(lst) == 4:\n        return lst[0]\n    if len(lst) == 5:\n        return lst[0]\n    if len(lst) == 6:\n        return lst[0]\n    if len(lst) == 7:\n        return lst[0]\n    if len(lst) == 8:\n        return lst[0]\n    if len(lst) == 9:\n        return lst[0]\n    if len(lst) == 10:\n        return lst[0]\n    if len(lst) == 11:\n        return lst[0]\n    if len(lst) == 12:\n        return lst[0]\n    if len(lst) == 13:\n        return lst[0]\n    if len(lst) == 14:\n        return lst[0]\n    if len(lst) == 15:\n        return lst[0]\n    if len(lst) == 16:\n        return lst[0]\n    if len(lst) == 17:\n        return lst[0]\n    if len(lst) ==",
    "\n    if not lst:\n        return []\n    return sorted(lst, key=lambda x: (x[0], x[1]))\n",
    "\n    rows = []\n    cols = []\n    for row in lst:\n        for col in row:\n            if col == 0:\n                cols.append(col)\n            else:\n                rows.append(row)\n    rows.sort(key=lambda x: x[0])\n    cols.sort(key=lambda x: x[1])\n    return [(x[0], x[1]) for x in rows] + [(x[1], x[0]) for x in cols]\n",
    "\n    if not lst:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    if len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    if len(lst) == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if len(lst) == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 9:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7",
    "\n    return sorted(lst, key=lambda x: (x[0], x[1]))\n\n",
    "\n    if not lst:\n        return []\n    if x < 0:\n        return []\n    if x > len(lst):\n        return []\n    if x in lst:\n        return [x]\n    lst.sort(key=lambda x: x[0])\n    lst.sort(key=lambda x: x[1])\n    return [x for x, y in lst if x == x[1]]\n",
    "\n    lst = sorted(lst, key=lambda x: x[0])\n    return [(x[0], x[1]) for x in lst]\n\n",
    "\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    if len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    if len(lst) == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if len(lst) == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 9:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[",
    "\n    lst = sorted(lst, key=lambda x: x[0])\n    return [x for x in lst if x[1] == x[0]]\n",
    "\n    lst = sorted(lst, key=lambda x: x[0])\n    return [x for x in lst if x[0] == x[1]]\n",
    "\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    if len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    if len(lst) == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if len(lst) == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 9:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[",
    "\n    if not lst:\n        return []\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    return [tuple(sorted(x)) for x in lst]\n",
    "\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    if len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    if len(lst) == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if len(lst) == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 9:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[",
    "\n    row_list = []\n    for row in lst:\n        row_list.append(sorted(row, key=lambda x: (x[0], x[1])))\n    return row_list\n",
    "\n    if not lst:\n        return []\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0], lst[1]]\n    if len(lst) == 3:\n        return [lst[0], lst[1], lst[2]]\n    if len(lst) == 4:\n        return [lst[0], lst[1], lst[2], lst[3]]\n    if len(lst) == 5:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4]]\n    if len(lst) == 6:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5]]\n    if len(lst) == 7:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6]]\n    if len(lst) == 8:\n        return [lst[0], lst[1], lst[2], lst[3], lst[4], lst[5], lst[6], lst[7]]\n    if len(lst) == 9:\n        return [lst[0], lst[1], lst[2], lst[3], lst[",
    "\n    if len(lst) == 0:\n        return []\n    if len(lst) == 1:\n        return [lst[0]]\n    if len(lst) == 2:\n        return [lst[0][0], lst[0][1]]\n    if len(lst) == 3:\n        return [lst[0][0], lst[0][1], lst[0][2]]\n    if len(lst) == 4:\n        return [lst[0][0], lst[0][1], lst[0][2], lst[0][3]]\n    if len(lst) == 5:\n        return [lst[0][0], lst[0][1], lst[0][2], lst[0][3], lst[0][4]]\n    if len(lst) == 6:\n        return [lst[0][0], lst[0][1], lst[0][2], lst[0][3], lst[0][4], lst[0][5]]\n    if len(lst) == 7:\n        return [lst[0][0], lst[0][1], lst[0][2], lst[0][3], lst[0][4], lst[0][5], lst[0][6]]\n    if len(lst) == 8:\n        return [lst[0][0], lst[0][1], lst[0][2",
    "\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    return [tuple(sorted(x)) for x in lst]\n"
  ]
}