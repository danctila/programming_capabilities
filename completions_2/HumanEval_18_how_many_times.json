{
  "problem_id": "HumanEval_18_how_many_times",
  "prompt": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"",
  "completions": [
    "\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 1\n    if string[0] == substring[0]:\n        return how_many_times(string[1:], substring) + 1\n    return how_many_times(string[1:], substring)\n",
    "\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 1\n    if len(string) == 2:\n        return 1 if substring in string else 0\n    return 1 + how_many_times(string[1:], substring)\n",
    "\n    if substring in string:\n        return 1\n    return 0 if substring in string else how_many_times(string, substring)\n\n",
    "\n    return len(string) - len(substring) - 1\n\n",
    "\n    if substring in string:\n        return 1 + how_many_times(string, substring[1:])\n    else:\n        return 0\n\n",
    "\n    if substring in string:\n        return 1\n    else:\n        return 0\n\n",
    "\n    if not string:\n        return 0\n    if not substring:\n        return 1\n    if len(string) < len(substring):\n        return 0\n    return 1 + how_many_times(string[1:], substring)\n",
    "\n    if not string:\n        return 0\n    if not substring:\n        return 1\n    return 1 + how_many_times(string[1:], substring)\n",
    "\n    # TODO: Implement this function\n    # return 0\n    # return 1\n    return 0\n\n",
    "\n    if not string:\n        return 0\n    if not substring:\n        return 0\n    if len(string) == 0:\n        return 0\n    if len(substring) == 0:\n        return 1\n    if len(substring) == 1:\n        return 1\n    if len(substring) == 2:\n        return 2\n    if len(substring) == 3:\n        return 3\n    if len(substring) == 4:\n        return 4\n    if len(substring) == 5:\n        return 5\n    if len(substring) == 6:\n        return 6\n    if len(substring) == 7:\n        return 7\n    if len(substring) == 8:\n        return 8\n    if len(substring) == 9:\n        return 9\n    if len(substring) == 10:\n        return 10\n    if len(substring) == 11:\n        return 11\n    if len(substring) == 12:\n        return 12\n    if len(substring) == 13:\n        return 13\n    if len(substring) == 14:\n        return 14\n    if len(substring) == 15:\n        return 15\n    if len(substring) == 16:\n        return ",
    "\n    if not string:\n        return 0\n    if not substring:\n        return 0\n    if len(string) < len(substring):\n        return 0\n    if len(substring) == 0:\n        return 1\n    if len(substring) == 1:\n        return 1\n    return 1 + how_many_times(string[1:], substring[1:])\n",
    "\n    if not string:\n        return 0\n    if substring in string:\n        return 1\n    return how_many_times(string[1:], substring) + how_many_times(string[1:], substring[1:])\n\n",
    "\n    return len(string) - len(substring) - 1\n\n",
    "\n    if substring in string:\n        return 1 + how_many_times(string[string.find(substring):], substring)\n    else:\n        return 0\n\n",
    "\n    if not string:\n        return 0\n    if not substring:\n        return 0\n    if len(string) == 1:\n        return 1\n    if len(substring) == 1:\n        return 1\n    if string[0] == substring[0]:\n        return how_many_times(string[1:], substring[1:]) + 1\n    return how_many_times(string[1:], substring)\n",
    "\n    if not string:\n        return 0\n    if not substring:\n        return 1\n    if substring in string:\n        return 1 + how_many_times(string[len(substring):], substring)\n    return how_many_times(string[len(substring):], substring) + how_many_times(string, substring[1:])\n",
    "\n    if len(string) == 0:\n        return 0\n    if len(string) == 1:\n        return 1\n    if len(string) == 2:\n        return 1 if substring in string else 0\n    if len(string) == 3:\n        return 1 if substring in string else 0 if string[0] == substring else 0\n    return how_many_times(string[1:], substring) + how_many_times(string[2:], substring)\n",
    "\n    if not string:\n        return 0\n    if not substring:\n        return 1\n    return 1 + how_many_times(string[1:], substring)\n",
    "\n    if not string:\n        return 0\n    if not substring:\n        return 0\n    if len(string) == 0:\n        return 0\n    if len(substring) == 0:\n        return 1\n    if len(substring) == 1:\n        return 1\n    if string[0] == substring[0]:\n        return 2 + how_many_times(string[1:], substring[1:])\n    else:\n        return 1 + how_many_times(string[1:], substring[1:])\n",
    "\n    if not string:\n        return 0\n    if not substring:\n        return 1\n    if substring == string[0]:\n        return 1 + how_many_times(string[1:], substring)\n    return how_many_times(string[1:], substring) + how_many_times(string[1:], substring[1:])\n"
  ]
}