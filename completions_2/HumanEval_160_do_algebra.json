{
  "problem_id": "HumanEval_160_do_algebra",
  "prompt": "from typing import List\n\ndef do_algebra(operator: List[str], operand: List[int]) -> int:\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"",
  "completions": [
    "\n    if len(operator) != len(operand):\n        raise ValueError('Operator and operand must have the same length.')\n\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result /= operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result\n",
    "\n    if len(operator) != len(operand):\n        raise ValueError('The length of operator and operand must be equal')\n    if len(operator) == 1:\n        return operator[0]\n    if len(operand) == 1:\n        return operand[0]\n    if len(operand) == 0:\n        return 0\n    if len(operand) == 1:\n        return operand[0]\n    if len(operand) == 2:\n        return operand[0] + operand[1]\n    if len(operand) == 3:\n        return operand[0] - operand[1]\n    if len(operand) == 4:\n        return operand[0] * operand[1]\n    if len(operand) == 5:\n        return operand[0] // operand[1]\n    if len(operand) == 6:\n        return operand[0] ** operand[1]\n    return 0\n",
    "\n    if len(operator) != len(operand):\n        raise ValueError(\"Operator and operand must have the same length\")\n\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result /= operand[i]\n        elif operator[i] == '//':\n            result //= operand[i]\n        elif operator[i] == '**':\n            result **= operand[i]\n    return result\n",
    "\n    if len(operator) != len(operand):\n        raise ValueError(\"The length of operator and operand must be equal.\")\n\n    if len(operator) == 1:\n        return operator[0] * operand[0]\n\n    if len(operand) == 1:\n        return operand[0] * operator[0]\n\n    result = 0\n    for i in range(len(operand)):\n        result += operator[i] * operand[i]\n    return result\n",
    "\n    if len(operator) != len(operand):\n        raise ValueError('The length of operator list is not equal to the length of operand list.')\n    if len(operator) == 1:\n        return operator[0]\n    if len(operand) == 1:\n        return operand[0]\n    if len(operand) == 2:\n        return operator[0] + operator[1]\n    if len(operand) == 3:\n        return operator[0] * operator[1]\n    if len(operand) == 4:\n        return operator[0] ** operator[1]\n    if len(operand) == 5:\n        return operator[0] // operator[1]\n    if len(operand) == 6:\n        return operator[0] % operator[1]\n    if len(operand) == 7:\n        return operator[0] ** operator[1]\n    if len(operand) == 8:\n        return operator[0] // operator[1] % operator[2]\n    if len(operand) == 9:\n        return operator[0] % operator[1] ** operator[2]\n    if len(operand) == 10:\n        return operator[0] % operator[1] // operator[2]\n    if len(operand) == 11:\n        return operator[0] % operator",
    "\n    if len(operator) != len(operand):\n        raise ValueError('Operator and operand must have the same length.')\n\n    if len(operator) == 0:\n        raise ValueError('Operator list must not be empty.')\n\n    if len(operand) == 0:\n        raise ValueError('Operand list must not be empty.')\n\n    if len(operator) == 1:\n        return operator[0]\n\n    if len(operand) == 1:\n        return operand[0]\n\n    if len(operand) == 2:\n        return operator[0] * operand[1]\n\n    if len(operand) == 3:\n        return operator[0] ** operand[1]\n\n    if len(operand) == 4:\n        return operator[0] // operand[1]\n\n    if len(operand) == 5:\n        return operator[0] % operand[1]\n\n    if len(operand) == 6:\n        return operator[0] ** operand[1]\n\n    if len(operand) == 7:\n        return operator[0] // operand[1] % operand[2]\n\n    if len(operand) == 8:\n        return operator[0] % operand[1] ** operand[2]\n\n    if len(operand) == 9:\n        return operator[0] ** operand[1]",
    "\n    if len(operator) != len(operand):\n        raise ValueError('Operator and operand must have the same length')\n    if len(operator) == 1:\n        return operator[0] * operand[0]\n    else:\n        return 0\n\n",
    "\n    if len(operator) != len(operand):\n        raise ValueError(\"The length of operator and operand must be equal.\")\n\n    if len(operator) == 1:\n        return operator[0] * operand[0]\n\n    if len(operand) == 1:\n        return operator[0] * operand[0]\n\n    result = 0\n    for i in range(len(operand)):\n        result += operator[i] * operand[i]\n\n    return result\n",
    "\n    if len(operator) != len(operand):\n        raise ValueError('The length of operator and operand are not equal.')\n\n    result = 0\n\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result /= operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n\n    return result\n",
    "\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '/':\n            result /= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n",
    "\n    if len(operator) != len(operand):\n        raise ValueError('The length of operator and operand must be equal.')\n\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result /= operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result\n",
    "\n    if len(operator) != len(operand):\n        raise ValueError(\"The length of operator and operand must be equal.\")\n    if len(operator) == 1:\n        return operator[0]\n    if len(operand) == 1:\n        return operand[0]\n    if len(operand) == 0:\n        return 0\n    if len(operand) == 1:\n        return operand[0]\n    if len(operand) == 2:\n        return operand[0] + operand[1]\n    if len(operand) == 3:\n        return operand[0] * operand[1]\n    if len(operand) == 4:\n        return operand[0] ** operand[1]\n    if len(operand) == 5:\n        return operand[0] // operand[1]\n    if len(operand) == 6:\n        return operand[0] % operand[1]\n    if len(operand) == 7:\n        return operand[0] ** operand[1]\n    if len(operand) == 8:\n        return operand[0] // operand[1] // operand[2]\n    if len(operand) == 9:\n        return operand[0] % operand[1] % operand[2]\n    if",
    "\n    if len(operator) != len(operand):\n        raise ValueError(\"Operator list and operand list must have the same length.\")\n    if len(operand) != 2:\n        raise ValueError(\"Operand list must have two operands.\")\n    if len(operand) == 1:\n        raise ValueError(\"Operand list must have at least two operands.\")\n    if len(operand) == 0:\n        raise ValueError(\"Operand list must have at least one operand.\")\n    if len(operand) == 1:\n        raise ValueError(\"Operand list must have at least two operands.\")\n    if len(operand) == 2:\n        if operand[0] == 0:\n            raise ValueError(\"Operand list must have at least one operand.\")\n        if operand[1] == 0:\n            raise ValueError(\"Operand list must have at least one operand.\")\n    if len(operand) == 3:\n        if operand[0] == 0:\n            raise ValueError(\"Operand list must have at least one operand.\")\n        if operand[1] == 0:\n            raise ValueError(\"Operand list must have at least one operand.\")\n        if operand[2] == 0:\n            raise ValueError(\"Operand list must have at least one operand.\")\n    if len(operand) == 4:\n        if operand[0]",
    "\n    if len(operator) != len(operand):\n        raise ValueError(\"Operator and operand length must be equal.\")\n    if len(operator) == 0:\n        raise ValueError(\"Operator list must not be empty.\")\n    if len(operand) == 0:\n        raise ValueError(\"Operand list must not be empty.\")\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Operator and operand length must be equal.\")\n    if len(operator) == 1:\n        return operator[0]\n    else:\n        return do_algebra(operator[1:], operand[1:])\n",
    "\n    if len(operator) != len(operand):\n        raise ValueError(\"Operator and operand length must be equal.\")\n    if len(operator) == 1:\n        if operator[0] == '+':\n            return operand[0] + operand[1]\n        elif operator[0] == '-':\n            return operand[0] - operand[1]\n        elif operator[0] == '*':\n            return operand[0] * operand[1]\n        elif operator[0] == '/':\n            return operand[0] // operand[1]\n        elif operator[0] == '**':\n            return operand[0] ** operand[1]\n    else:\n        if len(operator) == 2:\n            if operator[0] == '+':\n                return operand[0] + operand[1]\n            elif operator[0] == '-':\n                return operand[0] - operand[1]\n            elif operator[0] == '*':\n                return operand[0] * operand[1]\n            elif operator[0] == '/':\n                return operand[0] // operand[1]\n            elif operator[0] == '**':\n                return operand[0] ** operand[1]\n        else:\n            raise ValueError(\"Operator and operand length must be equal.\")\n",
    "\n    if len(operator) != len(operand):\n        raise ValueError(\"The length of operator and operand are not equal.\")\n\n    result = 0\n    for i in range(len(operator)):\n        if i == 0:\n            result += operator[i] * operand[i]\n        elif i == len(operator) - 1:\n            result -= operator[i] * operand[i]\n        else:\n            result += operator[i] * operand[i]\n    return result\n",
    "\n    if len(operator) != len(operand):\n        raise ValueError('The length of operator and operand is not equal')\n\n    if len(operator) == 1:\n        return operator[0] * operand[0]\n\n    if len(operator) == 2:\n        return operator[0] * operand[0] + operator[1] * operand[1]\n\n    if len(operator) == 3:\n        return operator[0] * operand[0] + operator[1] * operand[1] + operator[2] * operand[2]\n\n    if len(operator) == 4:\n        return operator[0] * operand[0] + operator[1] * operand[1] + operator[2] * operand[2] + operator[3] * operand[3]\n\n    if len(operator) == 5:\n        return operator[0] * operand[0] + operator[1] * operand[1] + operator[2] * operand[2] + operator[3] * operand[3] + operator[4] * operand[4]\n\n    if len(operator) == 6:\n        return operator[0] * operand[0] + operator[1] * operand[1] + operator[2] * operand[2] + operator[3] * operand[",
    "\n    if len(operator) != len(operand):\n        raise ValueError(\"The length of operator and operand must be equal.\")\n    if len(operator) == 1:\n        return operator[0] * operand[0]\n    if len(operand) == 1:\n        return operator[0] + operand[0]\n    if len(operator) == 2:\n        return operator[0] * operand[0] + operator[1] * operand[1]\n    if len(operand) == 2:\n        return operator[0] * operand[0] + operator[1] * operand[1] + operator[2] * operand[2]\n    if len(operator) == 3:\n        return operator[0] * operand[0] + operator[1] * operand[1] + operator[2] * operand[2] + operator[3] * operand[3]\n    if len(operand) == 3:\n        return operator[0] * operand[0] + operator[1] * operand[1] + operator[2] * operand[2] + operator[3] * operand[3] + operator[4] * operand[4]\n    if len(operand) == 4:\n        return operator[0] * operand[0] + operator[1]",
    "\n    if len(operator) != len(operand):\n        raise ValueError('Operator and operand must have the same length')\n    if len(operator) == 1:\n        return operator[0]\n    if len(operand) == 1:\n        return operand[0]\n    if len(operand) == 0:\n        return 0\n    if len(operand) == 1:\n        return operand[0]\n    if len(operand) == 2:\n        return operand[0] + operand[1]\n    if len(operand) == 3:\n        return operand[0] - operand[1]\n    if len(operand) == 4:\n        return operand[0] * operand[1]\n    if len(operand) == 5:\n        return operand[0] // operand[1]\n    if len(operand) == 6:\n        return operand[0] ** operand[1]\n    return 0\n",
    "\n    if len(operator) != len(operand):\n        raise ValueError('The length of operator and operand must be equal.')\n\n    result = 0\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i]\n        elif operator[i] == '-':\n            result -= operand[i]\n        elif operator[i] == '*':\n            result *= operand[i]\n        elif operator[i] == '/':\n            result /= operand[i]\n        elif operator[i] == '**':\n            result = result ** operand[i]\n    return result\n"
  ]
}