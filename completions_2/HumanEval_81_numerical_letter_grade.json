{
  "problem_id": "HumanEval_81_numerical_letter_grade",
  "prompt": "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    >>> grade_equation([4.0, 3, 1.7, 2, 3.5])\n    ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"",
  "completions": [
    "\n    grades = [float(x) for x in grades]\n\n    # Get the letter grades\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.0:\n            letter_grades.append('A+')\n        elif grade >= 2.7:\n            letter_grades.append('A')\n        elif grade >= 2.3:\n            letter_grades.append('A-')\n        elif grade >= 2.0:\n            letter_grades.append('B+')\n        elif grade >= 1.7:\n            letter_grades.append('B')\n        elif grade >= 1.3:\n            letter_grades.append('B-')\n        elif grade >= 1.0:\n            letter_grades.append('C+')\n        elif grade >= 0.7:\n            letter_grades.append('C')\n        elif grade >= 0.0:\n            letter_grades.append('D+')\n        elif grade < 0.0:\n            letter_grades.append('E')\n\n    return letter_grades\n",
    "\n    # Your code here\n    grades = [float(x) for x in grades]\n    return [x for x in grades if x >= 3.0]\n",
    "\n    grade_list = []\n    for grade in grades:\n        grade_list.append(grade)\n    grade_list.sort()\n    grade_list.reverse()\n    grade_list.append('E')\n    return grade_list\n",
    "\n    # Your code here\n    grades = list(map(lambda x: x/100, grades))\n    grades = sorted(grades)\n    letter_grades = ['A+', 'B', 'C-', 'C', 'A-']\n    return letter_grades[grades[-1]]\n",
    "\n    grades = [float(x) for x in grades]\n    grade_table = {\n        'A+': 'A',\n        'A': 'A',\n        'A-': 'A-',\n        'B+': 'B',\n        'B': 'B',\n        'B-': 'B-',\n        'C+': 'C',\n        'C': 'C',\n        'C-': 'C-',\n        'D+': 'D',\n        'D': 'D',\n        'E': 'E'\n    }\n    return [grade_table[x] for x in sorted(grades)]\n",
    "\n    grades = [float(x) for x in grades]\n    return [f'{x:.2f}' for x in grades if x >= 3.0]\n",
    "\n    # TODO: Write your code here\n    grades = [float(x) for x in grades]\n    grades.sort()\n    grades.reverse()\n    return [\n        f'{grades[-1]}, {grades[-2]}, {grades[-3]}, {grades[-4]}, {grades[-5]}'\n        for grades in zip(grades[:-1], grades[1:])\n    ]\n",
    "\n    # your code here\n    # 1. Create a list of all the grades\n    grades = list(map(lambda x: x, grades))\n    # 2. Create a list of all the letter grades\n    letter_grades = ['A+', 'B', 'C-', 'C', 'A-']\n    # 3. Create a list of all the letter grades that are less than or equal to the\n    #   current grade\n    less_than_or_equal_to_grade = [x for x in letter_grades if x <= grades[0]]\n    # 4. Create a list of all the letter grades that are greater than or equal to the\n    #   current grade\n    greater_than_or_equal_to_grade = [x for x in letter_grades if x >= grades[0]]\n    # 5. Create a list of all the letter grades that are greater than or equal to the\n    #   current grade\n    greater_than_or_equal_to_grade = [x for x in letter_grades if x >= grades[1]]\n    # 6. Create a list of all the letter grades that are less than or equal to the\n    #   current grade\n    less_than_or_equal_to_grade = [x for x in letter_grades if x <= grades[1]]\n    # 7. Create a list of all the letter grades that are greater than or",
    "\n    grades = list(map(lambda x: x, grades))\n    grades.sort()\n    grades.reverse()\n    return grades\n",
    "\n    grades = [float(x) for x in grades]\n    letter_grades = ['A+', 'B', 'C-', 'C', 'A-']\n    return [letter_grades[i] for i in sorted(set(grades))]\n",
    "\n    grades = [float(x) for x in grades]\n    letter_grades = ['A+', 'B', 'C-', 'C', 'A-']\n    return [letter_grades[i] for i in sorted(enumerate(grades), key=lambda x: x[1])]\n",
    "\n    grade_table = [\n        [4.0, 'A+'],\n        [3.7, 'A'],\n        [3.3, 'A-'],\n        [3.0, 'B+'],\n        [2.7, 'B'],\n        [2.3, 'B-'],\n        [2.0, 'B-'],\n        [1.7, 'B'],\n        [1.3, 'B-'],\n        [1.0, 'B-'],\n        [0.7, 'B'],\n        [0.0, 'B-'],\n        [0.0, 'B-'],\n    ]\n    return grade_table[grades.index(max(grades))]\n",
    "\n    grades = list(map(lambda x: x/100, grades))\n    return [str(x) for x in grades]\n",
    "\n    # Your code here\n    grades = list(map(lambda x: x, grades))\n    grade_table = {\n        \"A+\": \"A\",\n        \"A\": \"A\",\n        \"A-\": \"A-\",\n        \"B+\": \"B+\",\n        \"B\": \"B\",\n        \"B-\": \"B-\",\n        \"C+\": \"C+\",\n        \"C\": \"C\",\n        \"C-\": \"C-\",\n        \"D+\": \"D+\",\n        \"D\": \"D\",\n        \"E\": \"E\"\n    }\n    return [grade_table[x] for x in grades]\n",
    "\n    grade_list = []\n    for grade in grades:\n        if grade >= 4.0:\n            grade_list.append('A+')\n        elif grade >= 3.7:\n            grade_list.append('A')\n        elif grade >= 3.3:\n            grade_list.append('A-')\n        elif grade >= 3.0:\n            grade_list.append('B+')\n        elif grade >= 2.7:\n            grade_list.append('B')\n        elif grade >= 2.3:\n            grade_list.append('B-')\n        elif grade >= 2.0:\n            grade_list.append('C+')\n        elif grade >= 1.7:\n            grade_list.append('C')\n        elif grade >= 1.3:\n            grade_list.append('C-')\n        elif grade >= 1.0:\n            grade_list.append('D+')\n        elif grade >= 0.7:\n            grade_list.append('D')\n        elif grade >= 0.0:\n            grade_list.append('E')\n    return grade_list\n",
    "\n    grades = [float(x) for x in grades]\n    grades = sorted(grades)\n    grades = [x for x in grades if x >= 3.7]\n    grades = [x for x in grades if x >= 3.3]\n    grades = [x for x in grades if x >= 3.0]\n    grades = [x for x in grades if x >= 2.7]\n    grades = [x for x in grades if x >= 2.3]\n    grades = [x for x in grades if x >= 2.0]\n    grades = [x for x in grades if x >= 1.7]\n    grades = [x for x in grades if x >= 1.3]\n    grades = [x for x in grades if x >= 1.0]\n    grades = [x for x in grades if x >= 0.7]\n    grades = [x for x in grades if x >= 0.0]\n    return grades\n",
    "\n    grades = [float(x) for x in grades]\n    grades.sort()\n    letter_grades = []\n    for grade in grades:\n        if grade >= 3.7:\n            letter_grades.append('A+')\n        elif grade >= 3.3:\n            letter_grades.append('A')\n        elif grade >= 3.0:\n            letter_grades.append('A-')\n        elif grade >= 2.7:\n            letter_grades.append('B+')\n        elif grade >= 2.3:\n            letter_grades.append('B')\n        elif grade >= 2.0:\n            letter_grades.append('B-')\n        elif grade >= 1.7:\n            letter_grades.append('C+')\n        elif grade >= 1.3:\n            letter_grades.append('C')\n        elif grade >= 1.0:\n            letter_grades.append('D+')\n        elif grade >= 0.7:\n            letter_grades.append('D')\n        elif grade >= 0.0:\n            letter_grades.append('E')\n        else:\n            letter_grades.append('F')\n    return letter_grades\n",
    "\n    grade_list = []\n    for grade in grades:\n        grade_list.append(grade)\n    grade_list.sort()\n    grade_list.reverse()\n    grade_list.append('E')\n    return grade_list\n",
    "\n    grades = sorted(grades)\n    grades = [str(x) for x in grades]\n    grades = [x for x in grades if x >= 4.0]\n    grades = [x for x in grades if x >= 3.7]\n    grades = [x for x in grades if x >= 3.3]\n    grades = [x for x in grades if x >= 3.0]\n    grades = [x for x in grades if x >= 2.7]\n    grades = [x for x in grades if x >= 2.3]\n    grades = [x for x in grades if x >= 2.0]\n    grades = [x for x in grades if x >= 1.7]\n    grades = [x for x in grades if x >= 1.3]\n    grades = [x for x in grades if x >= 1.0]\n    grades = [x for x in grades if x >= 0.7]\n    grades = [x for x in grades if x >= 0.0]\n    return grades\n",
    "\n    grades = [float(x) for x in grades]\n    letter_grades = ['A+', 'B', 'C-', 'C', 'A-']\n    return [letter_grades[i] for i in sorted(enumerate(grades), key=lambda x: x[1])]\n"
  ]
}