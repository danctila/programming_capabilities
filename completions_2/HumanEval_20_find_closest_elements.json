{
  "problem_id": "HumanEval_20_find_closest_elements",
  "prompt": "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"",
  "completions": [
    "\n    if len(numbers) < 2:\n        return None, None\n    min_diff = float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return numbers[min_index], numbers[min_index + 1]\n",
    "\n    min_diff = float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[min_index])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return numbers[min_index], numbers[min_index]\n",
    "\n    if len(numbers) < 2:\n        raise ValueError(\"Must have at least two numbers\")\n    min_diff = float('inf')\n    min_idx = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            min_idx = i\n    return numbers[min_idx], numbers[min_idx]\n",
    "\n    min_distance = float(\"inf\")\n    min_index = 0\n    for i in range(len(numbers)):\n        distance = abs(numbers[i] - numbers[min_index])\n        if distance < min_distance:\n            min_distance = distance\n            min_index = i\n    return numbers[min_index], numbers[min_index]\n",
    "\n    if len(numbers) < 2:\n        raise ValueError(\"Must be at least 2 numbers\")\n    min_diff = float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return numbers[min_index], numbers[min_index+1]\n",
    "\n    if len(numbers) < 2:\n        raise ValueError(\"Numbers must be at least 2\")\n    min_diff = float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return min_index, min_diff\n",
    "\n    if len(numbers) < 2:\n        return None, None\n\n    min_diff = float('inf')\n    min_num = None\n    min_index = None\n\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_num = numbers[i]\n            min_index = i\n\n    return min_num, min_index\n",
    "\n    if len(numbers) < 2:\n        raise ValueError(\"The supplied numbers must be at least 2\")\n    min_distance = float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n        distance = abs(numbers[i] - numbers[i + 1])\n        if distance < min_distance:\n            min_distance = distance\n            min_index = i\n    return min_index, min_distance\n",
    "\n    if len(numbers) < 2:\n        raise ValueError(\"Must have at least two numbers\")\n\n    min_diff = float(\"inf\")\n    min_index = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return numbers[min_index], numbers[min_index]\n",
    "\n    if len(numbers) < 2:\n        raise ValueError(\"Must be at least 2 numbers\")\n    min_diff = float(\"inf\")\n    min_index = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return numbers[min_index], numbers[min_index + 1]\n",
    "\n    if len(numbers) < 2:\n        raise ValueError(\"Must have at least two numbers\")\n    min_diff = float('inf')\n    min_idx = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_idx = i\n    return numbers[min_idx], numbers[min_idx + 1]\n",
    "\n    if len(numbers) < 2:\n        return None, None\n    min_diff = float('inf')\n    min_idx = None\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_idx = i\n    return numbers[min_idx], numbers[min_idx + 1]\n",
    "\n    if len(numbers) < 2:\n        return None, None\n    min_diff = float('inf')\n    min_num = None\n    min_num_index = None\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_num = numbers[i]\n            min_num_index = i\n    return min_num, min_num_index\n",
    "\n    min_diff = float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return numbers[min_index], numbers[min_index + 1]\n",
    "\n    min_diff = float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return numbers[min_index], numbers[min_index+1]\n",
    "\n    min_diff = float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return numbers[min_index], numbers[min_index + 1]\n",
    "\n    return min(numbers, key=lambda x: abs(x - numbers[0]))\n\n",
    "\n    min_diff = float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[min_index])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return numbers[min_index], numbers[min_index]\n",
    "\n    if len(numbers) < 2:\n        raise ValueError(\"Numbers must be at least two\")\n    min_diff = float('inf')\n    min_index = 0\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_index = i\n    return numbers[min_index], numbers[min_index + 1]\n",
    "\n    if len(numbers) < 2:\n        raise ValueError(\"Numbers must have at least two elements.\")\n\n    min_diff = float('inf')\n    min_idx = None\n    for i in range(len(numbers)):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < min_diff:\n            min_diff = diff\n            min_idx = i\n\n    return numbers[min_idx], numbers[min_idx + 1]\n"
  ]
}