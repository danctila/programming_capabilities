{
  "problem_id": "HumanEval_61_correct_bracketing",
  "prompt": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing('(')\n    False\n    >>> correct_bracketing('()')\n    True\n    >>> correct_bracketing('(()())')\n    True\n    >>> correct_bracketing(')(()')\n    False\n    \"\"\"",
  "completions": [
    "\n    brackets_stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            brackets_stack.append('(')\n        elif bracket == ')':\n            brackets_stack.pop()\n        else:\n            return False\n    return brackets_stack == []\n\n",
    "\n    brackets = brackets.split()\n    for bracket in brackets:\n        if bracket in ['(', ')']:\n            return True\n        else:\n            return False\n\n",
    "\n    brackets_list = brackets.split('(')\n    brackets_list.reverse()\n    brackets_list.reverse()\n    for bracket in brackets_list:\n        if bracket == ')':\n            brackets_list.pop()\n        elif bracket == '(':\n            brackets_list.insert(0, ')')\n    return brackets_list == brackets\n",
    "\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace",
    "\n    brackets_list = brackets.split('(')\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets_list.reverse()\n    brackets",
    "\n    brackets_map = {\n        '(': ')',\n        ')': '(',\n        ']': '['\n    }\n    for bracket in brackets:\n        if bracket not in brackets_map:\n            return False\n    return True\n\n",
    "\n    brackets_list = brackets.split('(')\n    brackets_list.reverse()\n    brackets_list.reverse()\n    for bracket in brackets_list:\n        if bracket == ')':\n            return False\n        elif bracket == '(':\n            return True\n    return True\n\n",
    "\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace",
    "\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace",
    "\n    brackets_map = {\n        '(': ')',\n        ')': '(',\n        ']': '['\n    }\n    for bracket in brackets:\n        if bracket not in brackets_map:\n            return False\n    return True\n\n",
    "\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace",
    "\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace",
    "\n    brackets_map = {\n        '(': ')',\n        ')': '(',\n        ']': '['\n    }\n    for bracket in brackets:\n        if bracket not in brackets_map:\n            return False\n    return True\n\n",
    "\n    brackets_dict = {\n        '(': ')',\n        ')': '(',\n        ']': '['\n    }\n    for bracket in brackets:\n        if bracket not in brackets_dict:\n            return False\n    return True\n\n",
    "\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace",
    "\n    brackets_list = brackets.split('(')\n    brackets_list.reverse()\n    brackets_list.reverse()\n    for bracket in brackets_list:\n        if bracket != ')':\n            return False\n    return True\n\n",
    "\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets = brackets.replace",
    "\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace(')', ')')\n    brackets = brackets.replace('(', '(').replace(')', ')')\n    brackets = brackets.replace(')', '(').replace",
    "\n    brackets_dict = {\n        '(': ')',\n        ')': '(',\n        ']': '['\n    }\n    for bracket in brackets:\n        if bracket not in brackets_dict:\n            return False\n    return True\n\n",
    "\n    brackets_map = {\n        '(': ')',\n        ')': '(',\n        ']': '['\n    }\n    for bracket in brackets:\n        if bracket not in brackets_map:\n            return False\n    return True\n\n"
  ]
}