{
  "problem_id": "HumanEval_8_sum_product",
  "prompt": "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"",
  "completions": [
    "\n    return sum(numbers), sum(numbers) * 1\n\n",
    "\n    return sum(numbers), *[sum(numbers) for _ in numbers]\n",
    "\n    if not numbers:\n        return (0, 1)\n    return sum(numbers), reduce(lambda x, y: x*y, numbers)\n",
    "\n    return (sum(numbers), *map(sum, numbers))\n",
    "\n    return sum(numbers), 1 * sum(numbers)\n",
    "\n    return sum(numbers), 1 * sum(numbers)\n",
    "\n    return sum(numbers), *numbers\n",
    "\n    return sum(numbers), 1 * sum(numbers)\n",
    "\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n        return (sum(numbers), *map(lambda x: x * numbers.count(x), numbers))\n",
    "\n    return sum(numbers), sum(numbers) * len(numbers)\n\n",
    "\n    return sum(numbers), 1\n",
    "\n    return sum(numbers), 1 * sum(numbers)\n",
    "\n    return sum(numbers), 1\n",
    "\n    return sum(numbers), 1 * sum(numbers)\n",
    "\n    if not numbers:\n        return (0, 1)\n    return (sum(numbers), *map(lambda x: x * numbers.count(x), numbers))\n",
    "\n    return sum(numbers), *numbers\n",
    "\n    return sum(numbers), *numbers\n",
    "\n    return sum(numbers), 1\n",
    "\n    return sum(numbers), 1 * sum(numbers)\n",
    "\n    if not numbers:\n        return (0, 1)\n    else:\n        return (sum(numbers), *map(lambda x: x * numbers.count(x), numbers))\n"
  ]
}