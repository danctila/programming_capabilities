{
  "problem_id": "HumanEval_149_sorted_list_sum",
  "prompt": "from typing import List\n\ndef sorted_list_sum(lst: List[str]) -> List[str]:\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    >>> list_sort(['aa', 'a', 'aaa'])\n    ['aa']\n    >>> list_sort(['ab', 'a', 'aaa', 'cd'])\n    ['ab', 'cd']\n    \"\"\"",
  "completions": [
    "\n    return sorted(lst, key=len)\n\n",
    "\n    # your code here\n    return sorted(lst)\n",
    "\n    lst_sorted = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            lst_sorted.append(word)\n        else:\n            lst_sorted.append(word[1:])\n    return lst_sorted\n",
    "\n    lst = sorted(lst)\n    return lst\n",
    "\n    return sorted(lst, key=len)\n",
    "\n    # Your code here\n    lst_sorted = []\n    for word in lst:\n        if len(word) % 2 == 1:\n            lst_sorted.append(word)\n        else:\n            lst_sorted.append(word[0])\n    return lst_sorted\n\n# print(sorted_list_sum(['aa', 'a', 'aaa']))\n",
    "\n    return sorted(lst, key=lambda x: len(x))\n",
    "\n    return sorted(lst, key=lambda x: len(x))\n",
    "\n    lst_new = []\n    for i in lst:\n        if len(i) % 2 == 1:\n            lst_new.append(i)\n    return sorted(lst_new)\n",
    "\n    return sorted(lst)\n\n",
    "\n    lst = sorted(lst, key=len)\n    return lst\n",
    "\n    # Your code here\n    lst = sorted(lst)\n    return lst\n",
    "\n    lst_sorted = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            lst_sorted.append(word)\n        else:\n            lst_sorted.append(word[::2])\n    return lst_sorted\n",
    "\n    # Your code here\n    lst = sorted(lst, key=len)\n    return lst\n",
    "\n    # Your code here\n    return sorted(lst, key=len)\n",
    "\n    return sorted(lst, key=len)\n",
    "\n    lst_sorted = []\n    for word in lst:\n        if len(word) % 2 == 0:\n            lst_sorted.append(word)\n        else:\n            lst_sorted.append(word[1:])\n    return lst_sorted\n",
    "\n    lst = sorted(lst)\n    return lst\n",
    "\n    lst = sorted(lst)\n    return lst\n",
    "\n    # Write your code here\n    return sorted(lst)\n"
  ]
}