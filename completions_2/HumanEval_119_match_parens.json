{
  "problem_id": "HumanEval_119_match_parens",
  "prompt": "from typing import List\n\ndef match_parens(lst: List[str]) -> str:\n    \"\"\"\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n    'No'\n    \"\"\"",
  "completions": [
    "\n    def is_balanced(s: str) -> bool:\n        \"\"\"\n        Return True if the string s is balanced, False otherwise.\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    def is_good(s: str) -> bool:\n        \"\"\"\n        Return True if the string s is good, False otherwise.\n        \"\"\"\n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    for s in lst:\n        if is_balanced(s) and is_good(s):\n            return 'Yes'\n    return 'No'\n\n",
    "\n    def is_balanced(s: str) -> bool:\n        \"\"\"\n        Check if the string is balanced.\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes' if lst[0] == lst[1] else 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == ')' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'",
    "\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes' if lst[0] == lst[1] else 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    return 'No'\n",
    "\n    if len(lst) == 0:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if",
    "\n    def is_good(s: str) -> bool:\n        if s == '':\n            return True\n        if s[0] == '(':\n            return is_good(s[1:])\n        if s[0] == ')':\n            return not is_good(s[1:])\n        return False\n\n    return is_good(lst[0])\n\n",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    return 'No'\n",
    "\n    def is_balanced(s):\n        \"\"\"\n        Check if the string is balanced.\n        >>> is_balanced('()')\n        True\n        >>> is_balanced('()()')\n        True\n        >>> is_balanced('()(()')\n        False\n        >>> is_balanced('()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()(()",
    "\n    if len(lst) == 1:\n        return lst[0] == '('\n    else:\n        return match_parens(lst[1:]) == '('\n",
    "\n    if len(lst) == 1:\n        return lst[0] == '('\n    if len(lst) == 2:\n        return lst[0] == '(' and lst[1] == ')'\n    if lst[0] == '(' and lst[1] == ')':\n        return match_parens(lst[1:]) == 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return match_parens(lst[1:]) == 'Yes'\n    return False\n\n",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] ==",
    "\n    # 1. check if the string is balanced\n    # 2. check if the string is good\n    # 3. if the string is good, return 'Yes'\n    # 4. if the string is not good, return 'No'\n    # 5. if the string is good, return 'Yes'\n    # 6. if the string is not good, return 'No'\n    # 7. if the string is not good, return 'No'\n    # 8. if the string is good, return 'Yes'\n    # 9. if the string is not good, return 'No'\n    # 10. if the string is good, return 'Yes'\n    # 11. if the string is not good, return 'No'\n    # 12. if the string is good, return 'Yes'\n    # 13. if the string is not good, return 'No'\n    # 14. if the string is good, return 'Yes'\n    # 15. if the string is not good, return 'No'\n    # 16. if the string is good, return 'Yes'\n    # 17. if the string is not good, return 'No'\n    # 18. if the string is good, return 'Yes'\n    # 19. if the string is not good, return 'No'\n    # 2",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    return 'No'\n\n",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1]",
    "\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        if lst[0] == '(' and lst[1] == ')':\n            return 'Yes'\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == ')':\n        return match_parens(lst[1:])\n    if lst[1] == '(':\n        return match_parens(lst[0:-1])\n    return 'No'\n",
    "\n    if len(lst) == 1:\n        return 'Yes'\n    if len(lst) == 2:\n        return 'Yes' if lst[0] == lst[1] else 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'No'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'No'\n    if lst[0] == '('",
    "\n    # TODO: Implement your solution here\n    if len(lst) == 0:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if len(lst[1]) == 0:\n        return 'No'\n    if lst[0][0] == lst[1][0]:\n        return 'Yes'\n    if lst[0][0] == ')' and lst[1][0] == '(':\n        return 'Yes'\n    if lst[0][0] == '(' and lst[1][0] == ')':\n        return 'Yes'\n    if lst[0][0] == '(' and lst[1][0] == '(':\n        return 'Yes'\n    if lst[0][0] == ')' and lst[1][0] == '(':\n        return 'Yes'\n    if lst[0][0] == '(' and lst[1][0] == ')':\n        return 'Yes'\n    if lst[0][0] == '(' and lst[1][0] == ')':\n        return 'Yes'\n    if lst[0][0] == '(' and lst[1][0] == ')':\n        return 'Yes'\n    if lst[0][0] == '(' and lst[1][0] == ')':\n        return 'Yes'\n    if lst[0][0] == '(' and",
    "\n    return match_parens_helper(lst)\n",
    "\n    if not lst:\n        return 'No'\n    if len(lst) == 1:\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == ')' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == '(':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] == '(' and lst[1] == ')':\n        return 'Yes'\n    if lst[0] =="
  ]
}