{
  "problem_id": "HumanEval_69_search",
  "prompt": "from typing import List\n\ndef search(lst: List[int]) -> int:\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n    >>> search([4, 1, 2, 2, 3, 1])\n    2\n    >>> search([1, 2, 2, 3, 3, 3, 4, 4, 4])\n    3\n    >>> search([5, 5, 4, 4, 4])\n    -1\n    \"\"\"",
  "completions": [
    "\n    # your code here\n    return max(lst)\n",
    "\n    if not lst:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return max(lst[0], lst[1])\n    return max(lst[0], max(lst[1:]))\n",
    "\n    if not lst:\n        return -1\n    return max(lst, key=lambda x: lst.count(x))\n",
    "\n    if not lst:\n        return -1\n    return max(lst, key=lambda x: lst.count(x))\n",
    "\n    freq = [0] * len(lst)\n    for i in lst:\n        freq[i] += 1\n    res = -1\n    for i in range(len(lst)):\n        if freq[i] >= 2:\n            res = i\n            break\n    return res\n",
    "\n    if not lst:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return max(lst[0], lst[1])\n    return max(lst[0], max(lst[1], lst[2]))\n",
    "\n    return max(lst, key=lambda x: lst.count(x))\n\n",
    "\n    if not lst:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return max(lst[0], lst[1])\n    return max(search(lst[0:len(lst)-1]), search(lst[1:len(lst)]))\n",
    "\n    return max(lst)\n",
    "\n    if not lst:\n        return -1\n    max_freq = 0\n    max_freq_index = 0\n    for i in range(len(lst)):\n        freq = lst[i]\n        if freq > max_freq:\n            max_freq = freq\n            max_freq_index = i\n    return max_freq_index\n",
    "\n    if not lst:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return max(lst)\n    if len(lst) == 3:\n        return max(lst)\n    if len(lst) == 4:\n        return max(lst)\n    if len(lst) == 5:\n        return max(lst)\n    if len(lst) == 6:\n        return max(lst)\n    if len(lst) == 7:\n        return max(lst)\n    if len(lst) == 8:\n        return max(lst)\n    if len(lst) == 9:\n        return max(lst)\n    if len(lst) == 10:\n        return max(lst)\n    if len(lst) == 11:\n        return max(lst)\n    if len(lst) == 12:\n        return max(lst)\n    if len(lst) == 13:\n        return max(lst)\n    if len(lst) == 14:\n        return max(lst)\n    if len(lst) == 15:\n        return max(lst)\n    if len(lst) == 16:\n        return max(lst)\n    if len(lst) == 17:\n        return max(lst)\n    if len(lst) == 18:",
    "\n    return max(lst, key=lambda x: lst.count(x))\n",
    "\n    # TODO: Write your code here\n    return -1\n\n",
    "\n    if not lst:\n        return -1\n    max_freq = 0\n    max_freq_index = 0\n    for i in range(len(lst)):\n        if lst[i] > 0:\n            if max_freq < lst[i]:\n                max_freq = lst[i]\n                max_freq_index = i\n    return max_freq_index\n",
    "\n    return max(lst, key=lambda x: lst.count(x))\n",
    "\n    if not lst:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    return max(lst) if lst[0] > 0 else search(lst[1:])\n",
    "\n    if not lst:\n        return -1\n    max_freq = 0\n    for i in range(len(lst)):\n        freq = lst[i]\n        if freq > max_freq:\n            max_freq = freq\n    return max_freq\n",
    "\n    if not lst:\n        return -1\n    return max(lst)\n\n",
    "\n    if not lst:\n        return -1\n    if len(lst) == 1:\n        return lst[0]\n    if len(lst) == 2:\n        return max(lst[0], lst[1])\n    return max(search(lst[0:len(lst) - 1]), search(lst[1:len(lst)]))\n",
    "\n    # your code here\n    return max(lst)\n"
  ]
}