{
  "problem_id": "HumanEval_112_reverse_delete",
  "prompt": "from typing import Tuple\n\ndef reverse_delete(s: str, c: str) -> Tuple[str, bool]:\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    >>> reverse_delete('abcde', 'ae')\n    ('bcd', False)\n    >>> reverse_delete('abcdef', 'b')\n    ('acdef', False)\n    >>> reverse_delete('abcdedcba', 'ab')\n    ('cdedc', True)\n    \"\"\"",
  "completions": [
    "\n    return s, True if s == c else False\n",
    "\n    if not s:\n        return (s, True)\n    if not c:\n        return (c, False)\n    if c == s[0]:\n        return (s[1:], True)\n    if c == s[-1]:\n        return (s[:-1], True)\n    return (s[:-1], False)\n",
    "\n    return s, True\n",
    "\n    return s, c == s[::-1]\n\n",
    "\n    s_len = len(s)\n    c_len = len(c)\n    if s_len != c_len:\n        return (s, False)\n    if s[0] == c[0]:\n        return (s[1:], True)\n    return (s[1:], False)\n",
    "\n    return s, s == c\n",
    "\n    return s, s.count(c) == s.count(c)\n",
    "\n    return s, s == c\n\n",
    "\n    if len(s) == 0:\n        return (s, True)\n    if len(s) == 1:\n        return (s, True)\n    if c in s:\n        return (s[:: -1], False)\n    return (s[:: -1], True)\n",
    "\n    if not s:\n        return (s, True)\n    if not c:\n        return (c, False)\n    if s == c:\n        return (s, True)\n    if s[0] == c[0]:\n        return (s[1:], True)\n    if s[0] != c[0]:\n        return (s[1:], False)\n    if s[1:] == c[1:] and s[1:] != c[1:]:\n        return (s[1:], True)\n    return (s[1:], False)\n",
    "\n    if len(s) == 0:\n        return (s, True)\n    if len(c) == 0:\n        return (c, True)\n    if s[0] == c[0]:\n        return (reverse_delete(s[1:], c[1:]), False)\n    return (reverse_delete(s[1:], c[1:]), True)\n",
    "\n    if not s:\n        return (s, True)\n    if not c:\n        return (c, False)\n    if s[0] == c[0]:\n        return (s[1:], True)\n    return (s[1:], reverse_delete(s[1:], c[1:]))\n",
    "\n    return s, True if s == c else False\n",
    "\n    return s, c == s[::-1]\n\n",
    "\n    return s, True\n",
    "\n    if not s:\n        return (s, True)\n    if not c:\n        return (c, False)\n\n    if s == c:\n        return (s, True)\n\n    if s[0] == c[0]:\n        return (s[1:], True)\n    else:\n        return (c[1:], False)\n",
    "\n    if not s:\n        return (s, True)\n    if not c:\n        return (c, False)\n    if s[0] == c[0]:\n        return (s[1:], True)\n    return (s[1:], reverse_delete(s[1:], c[1:]))\n",
    "\n    if s == c:\n        return s, True\n    return s[c:len(s) - c], False\n",
    "\n    return s, True\n",
    "\n    return s, c == s[::-1]\n"
  ]
}