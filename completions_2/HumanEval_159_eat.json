{
  "problem_id": "HumanEval_159_eat",
  "prompt": "from typing import List\n\ndef eat(number: int, need: int, remaining: int) -> List[int]:\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    >>> eat(5, 6, 10)\n    [11, 4]\n    >>> eat(4, 8, 9)\n    [12, 1]\n    >>> eat(1, 10, 10)\n    [11, 0]\n    >>> eat(2, 11, 5)\n    [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"",
  "completions": [
    "\n    if number == 0:\n        return [number, remaining]\n    if number > remaining:\n        return [number, remaining]\n    return [number, remaining]\n",
    "\n    if number == 0:\n        return [number, remaining]\n    if number == 1:\n        return [number, remaining]\n    if number == 2:\n        return [number, remaining]\n    if number == 3:\n        return [number, remaining]\n    if number == 4:\n        return [number, remaining]\n    if number == 5:\n        return [number, remaining]\n    if number == 6:\n        return [number, remaining]\n    if number == 7:\n        return [number, remaining]\n    if number == 8:\n        return [number, remaining]\n    if number == 9:\n        return [number, remaining]\n    if number == 10:\n        return [number, remaining]\n    if number == 11:\n        return [number, remaining]\n    if number == 12:\n        return [number, remaining]\n    if number == 13:\n        return [number, remaining]\n    if number == 14:\n        return [number, remaining]\n    if number == 15:\n        return [number, remaining]\n    if number == 16:\n        return [number, remaining]\n    if number == 17:\n        return [number, remaining]\n    if number == 18:\n        return [number, remaining]\n    if number == 19:\n        return [number, remaining]\n    if number == 20:\n        return",
    "\n    if number == 0:\n        return [0, remaining]\n    if number == 1:\n        return [need, remaining]\n    if number == 2:\n        return [need, remaining - need]\n    if number == 3:\n        return [need, remaining - need - need]\n    if number == 4:\n        return [need, remaining - need - need - need]\n    if number == 5:\n        return [need, remaining - need - need - need - need]\n    if number == 6:\n        return [need, remaining - need - need - need - need - need]\n    if number == 7:\n        return [need, remaining - need - need - need - need - need - need]\n    if number == 8:\n        return [need, remaining - need - need - need - need - need - need - need]\n    if number == 9:\n        return [need, remaining - need - need - need - need - need - need - need - need]\n    if number == 10:\n        return [need, remaining - need - need - need - need - need - need - need - need - need]\n    if number == 11:\n        return [need, remaining - need - need - need - need - need - need - need - need - need - need]\n    if number == 12:\n        return [need, remaining - need - need - need",
    "\n    if remaining == 0:\n        return [number, 0]\n    else:\n        return [number, remaining - number]\n",
    "\n    if number == 0:\n        return [number, remaining]\n    if number > remaining:\n        return [number, remaining]\n    return [number, remaining]\n",
    "\n    if remaining == 0:\n        return [number, remaining]\n    else:\n        return [number + remaining, remaining]\n",
    "\n    if number == 0:\n        return [number, remaining]\n    if need == 0:\n        return [number, remaining]\n    if remaining == 0:\n        return [number, 0]\n    if remaining < need:\n        return [number, remaining]\n    return [number, remaining - need]\n",
    "\n    if number == 0:\n        return [0, remaining]\n    if need == 0:\n        return [0, remaining]\n    if remaining == 0:\n        return [number, 0]\n    if remaining > number:\n        return [number, remaining]\n    return [number, remaining - number]\n",
    "\n    if number >= need:\n        return [number, remaining]\n    else:\n        return [number, remaining]\n",
    "\n    if number == 0:\n        return [0, 0]\n    if need == 0:\n        return [0, remaining]\n    if remaining == 0:\n        return [number, 0]\n    if remaining < need:\n        return [number, remaining]\n    return [number, remaining - need]\n",
    "\n    if remaining == 0:\n        return [number, 0]\n    else:\n        return [number, remaining - number]\n",
    "\n    if number == 0:\n        return [0, remaining]\n    if need == 0:\n        return [number, remaining]\n    if remaining == 0:\n        return [number, 0]\n    if number + need <= remaining:\n        return [number + need, remaining - number]\n    return [number + need, remaining - number]\n",
    "\n    if number == 0:\n        return [0, remaining]\n    if number == 1:\n        return [number, remaining]\n    if number == 2:\n        return [0, remaining]\n    if number == 3:\n        return [0, remaining]\n    if number == 4:\n        return [0, remaining]\n    if number == 5:\n        return [0, remaining]\n    if number == 6:\n        return [0, remaining]\n    if number == 7:\n        return [0, remaining]\n    if number == 8:\n        return [0, remaining]\n    if number == 9:\n        return [0, remaining]\n    if number == 10:\n        return [0, remaining]\n    if number == 11:\n        return [0, remaining]\n    if number == 12:\n        return [0, remaining]\n    if number == 13:\n        return [0, remaining]\n    if number == 14:\n        return [0, remaining]\n    if number == 15:\n        return [0, remaining]\n    if number == 16:\n        return [0, remaining]\n    if number == 17:\n        return [0, remaining]\n    if number == 18:\n        return [0, remaining]\n    if number == 19:\n        return [0, remaining]\n    if number == 20:\n        return",
    "\n    if number == 0:\n        return [number, remaining]\n    if need == 0:\n        return [number, remaining]\n    if remaining == 0:\n        return [number, 0]\n    if remaining > need:\n        return [number, remaining - need]\n    return [number, remaining - need]\n",
    "\n    if number == 0:\n        return [number, remaining]\n    if need == 0:\n        return [number, remaining]\n    if remaining == 0:\n        return [number, 0]\n    if number > remaining:\n        return [number, remaining]\n    return [number, number - need]\n",
    "\n    if number == 0:\n        return [number, remaining]\n    if number == 1:\n        return [number, remaining]\n    if number == 2:\n        return [number, remaining]\n    if number == 3:\n        return [number, remaining]\n    if number == 4:\n        return [number, remaining]\n    if number == 5:\n        return [number, remaining]\n    if number == 6:\n        return [number, remaining]\n    if number == 7:\n        return [number, remaining]\n    if number == 8:\n        return [number, remaining]\n    if number == 9:\n        return [number, remaining]\n    if number == 10:\n        return [number, remaining]\n    if number == 11:\n        return [number, remaining]\n    if number == 12:\n        return [number, remaining]\n    if number == 13:\n        return [number, remaining]\n    if number == 14:\n        return [number, remaining]\n    if number == 15:\n        return [number, remaining]\n    if number == 16:\n        return [number, remaining]\n    if number == 17:\n        return [number, remaining]\n    if number == 18:\n        return [number, remaining]\n    if number == 19:\n        return [number, remaining]\n    if number == 20:\n        return",
    "\n    if number == 0:\n        return [number, remaining]\n    if need == 0:\n        return [number, remaining]\n    if remaining == 0:\n        return [number, 0]\n    if number > remaining:\n        return [number, 0]\n    return [number, remaining - number]\n",
    "\n    if remaining == 0:\n        return [number, 0]\n    elif remaining == 1:\n        return [number, 1]\n    else:\n        return [number, remaining - number]\n",
    "\n    if remaining == 0:\n        return [number, remaining]\n    else:\n        return [number + remaining, remaining - number]\n",
    "\n    if remaining == 0:\n        return [number, 0]\n    if remaining == 1:\n        return [number, 1]\n    if remaining == 2:\n        return [number, 2]\n    if remaining == 3:\n        return [number, 3]\n    if remaining == 4:\n        return [number, 4]\n    if remaining == 5:\n        return [number, 5]\n    if remaining == 6:\n        return [number, 6]\n    if remaining == 7:\n        return [number, 7]\n    if remaining == 8:\n        return [number, 8]\n    if remaining == 9:\n        return [number, 9]\n    if remaining == 10:\n        return [number, 10]\n    if remaining == 11:\n        return [number, 11]\n    if remaining == 12:\n        return [number, 12]\n    if remaining == 13:\n        return [number, 13]\n    if remaining == 14:\n        return [number, 14]\n    if remaining == 15:\n        return [number, 15]\n    if remaining == 16:\n        return [number, 16]\n    if remaining == 17:\n        return [number, 17]\n    if remaining == 18:\n        return [number, "
  ]
}